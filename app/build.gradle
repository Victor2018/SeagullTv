apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy_MM_dd_HHmm", TimeZone.getTimeZone("GMT+08:00"))
}

/**
 * 读取版本配置
 */
def Properties mVersionProps = getProperty();
/**
 * 读取版本名
 */
def String mVersionCode = mVersionProps['VERSION_CODE'];
/**
 * 读取版本名
 */
def String mVersionName = mVersionProps['VERSION_NAME'];
/**
 * 模式
 */
def String mModelOnline = String.valueOf(mVersionProps['MODEL_ONLINE']);
/**
 * 日志调试模式
 */
def String mModelDebug = String.valueOf(mVersionProps['MODEL_DEBUG']);
/**
 * 构建编号
 */
def String mBuildCode = String.valueOf(mVersionProps['BUILD_CODE']);
/**
 * 编译apk文件名称
 */
def String mBuildName = String.valueOf(mVersionProps['BUILD_NAME']);
/**
 * 指定输出目录
 */
def mOutputDir = "${rootDir}/outputs/build_" + releaseTime();
/**
 * fir api token
 */
def mFirApiToken = String.valueOf(mVersionProps['FIR_API_TOKEN'])
/**
 * fir上传url地址
 */
def mFirUploadUrl = String.valueOf(mVersionProps['FIR_UPLOAD_URL'])
/**
 * 是否上传到fir
 */
def mUpLoadToFir = String.valueOf(mVersionProps['UPLOAD_TO_FIR'])
/**
 * 上传至fir渠道名称
 */
def mUpLoadChannel = String.valueOf(mVersionProps['UPLOAD_CHANNEL'])


android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'

    signingConfigs {
        release {
            storeFile file('../docs/victor_keystore.jks')
            storePassword "android"
            keyAlias "victor"
            keyPassword "android"
            v2SigningEnabled false  //禁用v2签名方式
        }
    }

    defaultConfig {
        applicationId "com.victor.seagull"
        minSdkVersion 17
        targetSdkVersion 24
        versionCode Integer.valueOf(mVersionCode)
        versionName mVersionName

        buildConfigField "boolean", "MODEL_ONLINE", mModelOnline
        buildConfigField "boolean", "MODEL_DEBUG", mModelDebug
        buildConfigField "int", "BUILD_CODE", mBuildCode

        renderscriptTargetApi 26
        renderscriptSupportModeEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }

        ndk {
            moduleName "ImageBlur"
            ldLibs "m", "log", "jnigraphics"
//            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    //移除lint检测的error
    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
        overseas {
            res.srcDirs = ["overseas/res"]
        }
    }

    productFlavors {
        main {
            // 每个环境包名不同
            applicationId "com.victor.seagull"
            // 动态修改 常量 字段
            buildConfigField "String", "AUTHORITY", '"content.video.content"'
            manifestPlaceholders = [UPDATE_URL_KEY: "https://raw.githubusercontent.com/Victor2018/SeagullTv/master/docs/update_json.txt",
                                    AUTHORITIES   : "content.video.content"]
        }
        overseas {
            // 每个环境包名不同
            applicationId "com.victor.overseas.seagull"
            // 动态修改 常量 字段
            buildConfigField "String", "AUTHORITY", '"content.overseas.video.content"'
            manifestPlaceholders = [UPDATE_URL_KEY: "https://raw.githubusercontent.com/Victor2018/SeagullTv/master/docs/update_json.txt",
                                    AUTHORITIES   : "content.overseas.video.content"]
        }
    }

    // 自定义输出配置，这里我们加上APK版本号1.0
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                String typeName = variant.buildType.name;
                //只处理Rlease版本
                if ("release".equals(typeName)) {
                    // 输出apk名称为SeagullTv_v1.0_2017_11_20_18:00_main.apk
//                    def fileName = "SeagullTv_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                    def fileName = "${mBuildName}_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
//                output.outputFile = new File(outputFile.parent, fileName)
                    output.outputFile = new File(mOutputDir, fileName)
                }
            }
        }
    }
}
/**
 * 获取构建版本
 * @return
 */
def getProperty() {
    def Properties buildProps = new Properties()
    buildProps.load(new FileInputStream(file('../docs/build.properties')))
    return buildProps;
}
/**
 * 打包成功之后
 * 输出相应的日志记录
 * 保留此次打包的记录
 * 包括版本名称
 * 构建时间
 * 提交记录等
 */
def buildLog(String output, String vName, String vCode, String buildVerCode,String buildName, String modelOnline, String modelDebug,String firApiToken,String firUploadUrl,String upLoadToFir,String uploadChannel) {
    File outputFile = new File(output)
    if (!outputFile.exists())
        outputFile.mkdirs()
    FileWriter fw = new FileWriter(output + File.separator + "log.txt")
    StringBuilder builder = new StringBuilder();
    builder.append("[构建时间]=" + releaseTime())
    builder.append("\r\n")
    builder.append("[版本编号]=" + vCode)
    builder.append("\r\n")
    builder.append("[版本名称]=" + vName)
    builder.append("\r\n")
    builder.append("[编译版本]=" + buildVerCode)
    builder.append("\r\n")
    builder.append("[线上环境]=" + modelOnline)
    builder.append("\r\n")
    builder.append("[调试模式]=" + modelDebug)
    builder.append("\r\n")
    builder.append("[上传标记]=" + upLoadToFir)
    builder.append("\r\n")
    builder.append("[上传渠道]=" + uploadChannel)
    fw.write(builder.toString())
    fw.flush();
    fw.close();

    if (Boolean.valueOf(upLoadToFir)) {
        uploadToFir(output,vName,buildVerCode,buildName,firApiToken,firUploadUrl,uploadChannel);
    }
}

def uploadToFir (String output,String verName,String buildVerCode,String buildName,String firApiToken,String firUploadUrl,String uploadChannel) {
    println(output)
    def appName = "海鸥TV"
    def bundleId = project.android.defaultConfig.applicationId
    def iconPath = "${rootDir}/app/src/${uploadChannel}/res/mipmap-xxhdpi/logo.png"
    if (!uploadChannel.equals("main")) {
        iconPath = "$rootDir/app/${uploadChannel}/res/mipmap-xxhdpi/logo.png"
    }
    def fileName = "${buildName}_v${verName}_${uploadChannel}.apk"
    def apkPath = "${output}/${fileName}"
    def changeLog = "1,添加自动上传fir功能;2,修复自动上传fir更新日志乱码问题;3,添加上传渠道配置"

    //执行Python脚本
    def process = "python $rootDir/docs/upToFir.py ${firUploadUrl} ${appName} ${bundleId} ${verName} ${firApiToken} ${iconPath} ${apkPath} ${buildVerCode} ${changeLog}".execute()
    println("########################## upload to fir start ###########################")
    println("appName------------>" + appName)
    println("bundleId----------->" + bundleId)
    println("iconPath----------->" + iconPath)
    println("fileName----------->" + fileName)
    println("apkPath------------>" + apkPath)
    println("changeLog---------->" + changeLog)
    println("buildVerCode------->" + buildVerCode)
    println("uploadChannel------>" + uploadChannel)
    //获取Python脚本日志，便于出错调试
    ByteArrayOutputStream result = new ByteArrayOutputStream()
    def is = process.getInputStream()
    byte[] buffer = new byte[1024]
    int size = is.read(buffer);
    while (size != -1) {
        result.write(buffer, 0, size)
        size = is.read(buffer);
    }
    println("upload reponse result = " + result.toString("UTF-8"))
    println("########################### upload to fir success ##########################")
}

build {
    doLast {
        buildLog(mOutputDir, mVersionName, mVersionCode, mBuildCode,mBuildName, mModelOnline, mModelDebug,mFirApiToken,mFirUploadUrl,mUpLoadToFir,mUpLoadChannel)
        copy {
            from "$buildDir/outputs/mapping"
            into mOutputDir
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.android.support:recyclerview-v7:24.2.0'
    compile 'com.android.support:cardview-v7:24.2.0'
    compile 'com.android.support:design:24.2.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'jp.wasabeef:glide-transformations:1.3.1'
    compile 'com.mikepenz:iconics-core:2.5.5@aar'
    compile 'com.mikepenz:material-design-iconic-typeface:2.2.0.1@aar'
    compile 'com.mikepenz:fontawesome-typeface:4.5.0.1@aar'
    compile 'com.mikepenz:foundation-icons-typeface:3.0.0.1@aar'

//    compile 'com.mcxiaoke.volley:library:1.0.19'
//    compile 'com.squareup.okhttp3:okhttp:3.1.2'
    compile 'com.google.code.gson:gson:2.6.1'
    compile 'com.alibaba:fastjson:1.1.56.android'

    compile('com.afollestad.material-dialogs:core:0.9.0.1@aar') {
        transitive = true
    }
    compile('com.afollestad.material-dialogs:commons:0.9.0.1') {
        transitive = true
    }
    compile 'com.github.Victor2018:AppUpdateLib:v1.9'
    compile 'com.github.Victor2018:PermissionHelper:v1.0'
    compile 'com.github.Victor2018:SeagullPlayer:v1.7'
    compile 'com.github.Victor2018:HttpLib:v2.7'
}