package com.victor.db;import android.content.ContentProvider;import android.content.ContentUris;import android.content.ContentValues;import android.content.UriMatcher;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteQueryBuilder;import android.net.Uri;import android.util.Log;import com.victor.util.Constant;/** * Created by victor on 2015/12/25. */public class DataBaseContent extends ContentProvider {	private String TAG = "DataBaseContent";	private static final int TB_VIDEO_DIY 					    = 1;	private static final int TB_VIDEO_DIY_ID 				    = 2;    DataBase db;    private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);    static{        sURIMatcher.addURI(Constant.DbConfig.AUTHORITY, Constant.TB.VIDEO_DIY, TB_VIDEO_DIY);        sURIMatcher.addURI(Constant.DbConfig.AUTHORITY, Constant.TB.VIDEO_DIY + "/#", TB_VIDEO_DIY_ID);    }    @Override    public boolean onCreate() {        db = new DataBase(this.getContext(), null, null, 0);        return false;    }    @Override    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {        int type = sURIMatcher.match(uri);        Log.d(TAG,"query-type = " + type);        String id = "";        if(type % 2 == 0){        	if (uri.getPathSegments().size() > 1) {        		id = uri.getPathSegments().get(1);        	}        }        if(id != null && !id.equals("")){            if(selection == null){                selection = "_id" + id;                System.out.println("selection:" + selection);            }else{                selection = selection + "and _id" + id;            }        }        SQLiteDatabase sdb = db.getReadableDatabase();        SQLiteQueryBuilder sqb = new SQLiteQueryBuilder();        sqb.setTables(getTableName(uri));        Cursor cursor = sqb.query(sdb, projection, selection, selectionArgs, null, null, sortOrder);        return cursor;    }    @Override    public String getType(Uri uri) {        return null;    }    @Override    public Uri insert(Uri uri, ContentValues values) {        SQLiteDatabase sdb = db.getWritableDatabase();        String intsertUri = Constant.DbConfig.URI_PATH + getTableName(uri);        long id = sdb.insert(intsertUri, null, values);        uri = ContentUris.withAppendedId(uri, id);        getContext().getContentResolver().notifyChange(uri, null);        return uri;    }    @Override    public int delete(Uri uri, String selection, String[] selectionArgs) {        SQLiteDatabase sdb = db.getWritableDatabase();        String rowId = uri.getPathSegments().get(1);        return sdb.delete(getTableName(uri), "_id=" + rowId, null);    }    @Override    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {        SQLiteDatabase sdb = db.getWritableDatabase();        String rowId = uri.getPathSegments().get(1);        return sdb.update(getTableName(uri), values, "_id = " + rowId, null);    }    private String getTableName (Uri uri) {    	int type = sURIMatcher.match(uri);    	String tableName = "";        switch (type) {		case TB_VIDEO_DIY:			tableName = Constant.TB.VIDEO_DIY;			break;		case TB_VIDEO_DIY_ID:			tableName = Constant.TB.VIDEO_DIY;			break;		default:			break;		}        return tableName;    }}