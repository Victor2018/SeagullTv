package com.victor.seagull;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.ActivityCompat;import android.support.v4.app.ActivityOptionsCompat;import android.support.v4.view.ViewCompat;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.animation.DecelerateInterpolator;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.RelativeLayout;import com.victor.adapter.GankAdapter;import com.victor.adapter.SlideInBottomAnimatorAdapter;import com.victor.model.data.GankData;import com.victor.model.data.GankInfo;import com.victor.module.DataObservable;import com.victor.presenter.GankPresenter;import com.victor.presenter.impl.GankPresenterImpl;import com.victor.seagull.view.GankView;import com.victor.util.Constant;import com.victor.util.DensityUtil;import com.victor.util.SnackbarUtil;import com.victor.widget.ColorFloatingActionButton;import com.victor.widget.InsetsAppBarLayout;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import java.util.Observable;public class GankActivity extends BaseActivity implements AdapterView.OnItemClickListener,        View.OnClickListener,SwipeRefreshLayout.OnRefreshListener,GankView{    private InsetsAppBarLayout mToolBarLayout;    private Toolbar toolbar;    private ColorFloatingActionButton mFab;    private RelativeLayout mainParent;    private ImageView bubblesIv;    private SwipeRefreshLayout mSrlFresh;    private RecyclerView mRvGank;    private GridLayoutManager gridLayoutManager;    private GankAdapter gankAdapter;    private List<GankInfo> gankInfos = new ArrayList<>();    private  int currentPage = 1;//当前页数    private boolean isLoading;    private GankPresenter gankPresenter;    private float actionbarScrollPoint;    private float maxScroll;    public float summaryScrolled;    private boolean actionBarShown = true;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Action.SHARE_PICTURE:                    Intent intentshare = new Intent(Intent.ACTION_SEND);                    intentshare.setType(Constant.SHARE_TYPE)                            .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share))                            .putExtra(Intent.EXTRA_TEXT,getString(R.string.share_beauty) + msg.obj);                    Intent.createChooser(intentshare, getString(R.string.share));                    startActivity(intentshare);                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_gank);        initialize();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        mToolBarLayout = (InsetsAppBarLayout) findViewById(R.id.appbar_layout);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        injectViewsAndSetUpToolbar();        mFab = (ColorFloatingActionButton) findViewById(R.id.fab);        mainParent = (RelativeLayout) findViewById(R.id.main_parent_rl);        bubblesIv = (ImageView) findViewById(R.id.bubbles_iv);        mSrlFresh = (SwipeRefreshLayout) findViewById(R.id.srl_fresh);        mRvGank = (RecyclerView) findViewById(R.id.rv_gank);        mRvGank.setHasFixedSize(true);        //设置 进度条的颜色变化，最多可以设置4种颜色        mSrlFresh.setColorSchemeResources(android.R.color.holo_purple, android.R.color.holo_blue_bright,                android.R.color.holo_orange_light, android.R.color.holo_red_light);        mSrlFresh.setOnRefreshListener(this);        mFab.setOnClickListener(this);        gridLayoutManager = new GridLayoutManager(this, 2);//这里用线性宫格显示 类似于grid view        //设置头部及底部View占据整行空间        gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {            @Override            public int getSpanSize(int position) {                return (gankAdapter.isHeaderView(position) || gankAdapter.isBottomView(position)) ? gridLayoutManager.getSpanCount() : 1;            }        });        mRvGank.setLayoutManager(gridLayoutManager);        gankAdapter = new GankAdapter(this,this);        gankAdapter.setDatas(gankInfos);        gankAdapter.setHeaderVisible(false);        gankAdapter.setFooterVisible(false);//        SlideInLeftAnimatorAdapter animatorAdapter = new SlideInLeftAnimatorAdapter(gankAdapter, mRvGank);//        ScaleInAnimatorAdapter animatorAdapter = new ScaleInAnimatorAdapter(gankAdapter, mRvGank);//        AlphaAnimatorAdapter animatorAdapter = new AlphaAnimatorAdapter(gankAdapter, mRvGank);        SlideInBottomAnimatorAdapter animatorAdapter = new SlideInBottomAnimatorAdapter(gankAdapter, mRvGank);//        SlideInRightAnimatorAdapter animatorAdapter = new SlideInRightAnimatorAdapter(gankAdapter, mRvGank);//        SwingBottomInAnimationAdapter animatorAdapter = new SwingBottomInAnimationAdapter(gankAdapter, mRvGank);        mRvGank.setAdapter(animatorAdapter);        mRvGank.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                int lastVisibleItemPosition = gridLayoutManager.findLastVisibleItemPosition();                if (lastVisibleItemPosition + 1 == gankAdapter.getItemCount()) {                    boolean isRefreshing = mSrlFresh.isRefreshing();                    if (isRefreshing) {                        gankInfos.clear();                        gankAdapter.notifyDataSetChanged();                        return;                    }                    if (!isLoading) {                        isLoading = true;                        currentPage ++;                        gankPresenter.getGankDatas(currentPage);                    }                }                if (dy > actionbarScrollPoint) {                    showActionbar(false, true);                }                if (dy < actionbarScrollPoint * (-1)) {                    showActionbar(true, true);                }                summaryScrolled += dy;                bubblesIv.setTranslationY(-0.5f * summaryScrolled);                float alpha = summaryScrolled / maxScroll;                alpha = Math.min(1.0f, alpha);                setToolbarAlpha(alpha);                //change background color on scroll                int color = (int) Math.max(Constant.BG_COLOR_MIN, Constant.BG_COLOR_MAX - summaryScrolled * 0.05);                mainParent.setBackgroundColor(Color.argb(255, color, color, color));            }        });        gankPresenter = new GankPresenterImpl(this);        gankPresenter.getGankDatas(currentPage);    }    protected void injectViewsAndSetUpToolbar() {        ViewCompat.setElevation(mToolBarLayout, DensityUtil.dip2px(this, 4.0F));    }    protected void showActionbar(boolean show, boolean animate) {        if (animate) {            autoShowOrHideActionBar(show);        } else {            if (show) {                getSupportActionBar().show();            } else {                getSupportActionBar().hide();            }        }    }    public void setToolbarAlpha(float alpha) {        mToolBarLayout.getBackground().setAlpha((int) (alpha * 255));    }    protected void autoShowOrHideActionBar(boolean show) {        if (show == actionBarShown) {            return;        }        actionBarShown = show;        onActionBarAutoShowOrHide(show);    }    protected void onActionBarAutoShowOrHide(boolean shown) {        View view = mToolBarLayout;        if (shown) {            view.animate()                    .translationY(0)                    .alpha(1)                    .setDuration(Constant.HEADER_HIDE_ANIM_DURATION)                    .setInterpolator(new DecelerateInterpolator());        } else {            view.animate()                    .translationY(-view.getBottom())                    .alpha(0)                    .setDuration(Constant.HEADER_HIDE_ANIM_DURATION)                    .setInterpolator(new DecelerateInterpolator());        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_gank, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;            case R.id.action_share:                Intent intentshare = new Intent(Intent.ACTION_SEND);                intentshare.setType("text/plain")                        .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share))                        .putExtra(Intent.EXTRA_TEXT,getString(R.string.share_app));                Intent.createChooser(intentshare, getString(R.string.share));                startActivity(intentshare);                return true;            case R.id.action_thumb_up:                SnackbarUtil.ShortSnackbar(mRvGank,getString(R.string.thanks_your_support)).show();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {        Bundle bundle = new Bundle();        bundle.putSerializable(Constant.INTENT_DATA_KEY, (Serializable) gankInfos);        bundle.putInt(Constant.CURRENT_PAGE_KEY,position);        Intent intent = new Intent(GankActivity.this,GankDetailActivity.class);        intent.putExtras(bundle);        ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(GankActivity.this,                view.findViewById(R.id.iv_img), getString(R.string.transition_album_img));        ActivityCompat.startActivity(GankActivity.this, intent, options.toBundle());    }    @Override    public void showLoading() {        gankAdapter.setFooterVisible(true);    }    @Override    public void hideLoading() {        mSrlFresh.setRefreshing(false);        gankAdapter.setFooterVisible(false);    }    @Override    public void showError(String error) {        SnackbarUtil.ShortSnackbar(mRvGank,error,SnackbarUtil.WARNING).show();    }    @Override    public void setGankDatas(GankData data) {        isLoading = false;        gankInfos.addAll(data.getResults());        gankAdapter.notifyDataSetChanged();    }    @Override    public void onRefresh() {        gankPresenter.getGankDatas(currentPage);    }    @Override    public void update(Observable observable, Object data) {         if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int action = bundle.getInt(Constant.ACTION_KEY);            if (action == Constant.Action.SHARE_PICTURE) {                String imgUrl = ((Bundle) data).getString(Constant.INTENT_DATA_KEY);                Message msg = new Message();                msg.what = Constant.Action.SHARE_PICTURE;                msg.obj = imgUrl;                mHandler.sendMessage(msg);            }        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.fab:                mRvGank.smoothScrollToPosition(0);                break;        }    }}