package com.victor.seagull;import android.content.Context;import android.content.Intent;import android.graphics.drawable.AnimationDrawable;import android.media.AudioManager;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.NonNull;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.TextUtils;import android.view.Display;import android.view.GestureDetector;import android.view.KeyEvent;import android.view.MotionEvent;import android.view.SurfaceView;import android.view.View;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.animation.LinearInterpolator;import android.widget.AdapterView;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import com.afollestad.materialdialogs.MaterialDialog;import com.mikepenz.iconics.IconicsDrawable;import com.mikepenz.material_design_iconic_typeface_library.MaterialDesignIconic;import com.victor.adapter.ChannelAdapter;import com.victor.adapter.ScreenScaleAdapter;import com.victor.adapter.WheelTextAdapter;import com.victor.dao.DbDao;import com.victor.data.ChannelUrl;import com.victor.data.LiveCategory;import com.victor.data.Channel;import com.victor.data.EpgData;import com.victor.data.EpgInfo;import com.victor.data.ScaleData;import com.victor.interfaces.OnShakeListener;import com.victor.interfaces.OnWheelScrollListener;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.module.ShakeManager;import com.victor.player.library.module.PlayHelper;import com.victor.player.library.module.Player;import com.victor.util.Constant;import com.victor.util.EpgUtil;import com.victor.util.NetSpeedUtil;import com.victor.util.ScreenOrientationUtil;import com.victor.util.SharePreferencesUtil;import com.victor.util.TVLiveUtils;import com.victor.util.ThemeUtils;import com.victor.widget.CircleProgressBar;import com.victor.widget.ColorMovingTextView;import com.victor.widget.TipView;import com.victor.widget.WheelView;import java.util.ArrayList;import java.util.List;import java.util.Observable;import butterknife.Bind;import butterknife.ButterKnife;import butterknife.OnClick;public class LiveActivity extends BaseActivity implements AdapterView.OnItemClickListener,        View.OnTouchListener,OnShakeListener {    private String TAG = "LiveActivity";    @Bind(R.id.sv_live)    SurfaceView svLive;    @Bind(R.id.iv_maintenance)    ImageView mIvMaintenance;    @Bind(R.id.iv_play_loading)    ImageView mIvPlayLoading;    @Bind(R.id.iv_run_loading)    ImageView mIvRunLoading;    @Bind(R.id.iv_run_fold)    ImageView mIvRunFold;    @Bind(R.id.rv_channels)    RecyclerView mRvChannels;    @Bind(R.id.wv_category)    WheelView mWvCategory;    @Bind(R.id.wv_scale)    WheelView mWvScales;    @Bind(R.id.tv_tip)    TipView mTvTip;    @Bind(R.id.ll_channels)    LinearLayout mLayoutChannel;    @Bind(R.id.iv_voice_bright)    ImageView mIvVoiiceBright;    @Bind(R.id.cpb_voice_bright)    CircleProgressBar mCpbVoiiceBright;    @Bind(R.id.fl_voice_bright)    FrameLayout mLayoutVoiceBright;    @Bind(R.id.fl_play)    FrameLayout mLayoutPlay;    @Bind(R.id.fl_epg_tip)    FrameLayout mLayoutEpgTip;    @Bind(R.id.rl_gentrue_tip)    RelativeLayout mLayoutGentrueTip;    @Bind(R.id.mtv_net_speed)    ColorMovingTextView mMtvNetSpeed;    private LinearLayoutManager mLlmChannel;//    private CategoryAdapter categoryAdapter;    private WheelTextAdapter wheelTextAdapter;    private ScreenScaleAdapter screenScaleAdapter;    private ChannelAdapter channelAdapter;    private List<LiveCategory> categoryList = new ArrayList<>();    private List<ScaleData> scaleDatas = new ArrayList<>();    private List<Channel> channelList = new ArrayList<>();    private HttpRequestHelper mHttpRequestHelper;    private PlayHelper mPlayHelper;    private int currentCategoryPosition = -1;//当前播放直播列表分类    private int currentPosition = -1;//当前播放节目位置    private int livePlayPosition;//当前播放直播源地址位置    private Animation mAnimShowChannels,mAnimHideChannels,mAnimRotate,mAnimAlpha;    private AnimationDrawable runLoadingAnim,playLoadingAnim;    private GestureDetector mGestureDetector;    private AudioManager mAudioManager;    private int mMaxVolume;    private int mVolume = -1;    private float mBrightness = -1f;    private long mDuration;    private boolean isPlayNext;//是否播放下一个节目    private boolean isPlayPrev;//是否播放上一个节目    private boolean isSourceNext;//是否切换下一个源    private boolean isSourcePrev;//是否切换上一个源    private boolean isShakeChangeProgram;//是否打开摇一摇换台    private boolean isChannelRecyleViewScrolling;//是否频道列表正在滚动    private ScreenOrientationUtil screenOrientationUtil;    private  List<String> tips = new ArrayList<>();    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Player.PLAYER_PREPARING:                    startLoadingAnim();                    mIvMaintenance.setVisibility(View.GONE);                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    mHandler.removeMessages(Constant.Msg.GET_NETSPEED);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.GET_NETSPEED, 1000);                    break;                case Player.PLAYER_PREPARED:                    stopLoadingAnim();                    mIvMaintenance.setVisibility(View.GONE);                    hiddenViewAnim();                    mHandler.removeMessages(Constant.Msg.GET_NETSPEED);                    if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {                        mDuration = mPlayHelper.getPlayer().getDuration();                    }                    break;                case Player.PLAYER_ERROR:                    stopLoadingAnim();                    livePlayPosition++;                    play(false);                    break;                case Player.PLAYER_BUFFERING_START:                    startLoadingAnim();                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_BUFFERING_END:                    stopLoadingAnim();                    mIvMaintenance.setVisibility(View.GONE);                    break;                case Player.PLAYER_PROGRESS_INFO:                    if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {                        int elapseMsec = mPlayHelper.getPlayer().getCurrentPosition();                        if (mDuration > 0) {                            int progress = (int) (elapseMsec * 100 / mDuration);                        }                    }                    break;                case Player.PLAYER_COMPLETE:                    break;                case Constant.Msg.HIDE_PLAY_CTRL_VIEW:                    hiddenViewAnim();                    break;                case Constant.Msg.SHOW_LIVE_EPG:                    if (currentPosition != -1) {                        int currentSource = livePlayPosition + 1;                        tips.clear();                        tips.add(channelList.get(currentPosition).getChannel_name() + getString(R.string.source) + currentSource + "/" + channelList.get(currentPosition).getPlay_urls().size() + "）");                    }                    List<EpgInfo> epgs = (List<EpgInfo>) msg.obj;                    if (epgs != null) {                        if (epgs.size() == 1) {                            tips.add( getString(R.string.playing) + epgs.get(0).epg);                        } else if (epgs.size() == 2) {                            tips.add( getString(R.string.playing) + epgs.get(0).epg);                            tips.add( getString(R.string.will_play) + epgs.get(1).epg);                        }                    }                    mLayoutEpgTip.setVisibility(View.VISIBLE);                    mTvTip.setTipList(tips);                    break;                case Constant.Msg.GET_NETSPEED:                    mHandler.post(netSpeedRunnable);                    break;                case Constant.Msg.SHOW_NETSPEED:                    mMtvNetSpeed.setText(msg.obj.toString());                    mHandler.removeMessages(Constant.Msg.GET_NETSPEED);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.GET_NETSPEED, 1000);                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);//去掉信息栏        setContentView(R.layout.activity_live);        ButterKnife.bind(this);        initialize();        initLoadingAnimi();        initData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        mTvTip.setIconVisible(false);        mLlmChannel = new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL, false);        mRvChannels.setLayoutManager(mLlmChannel);        channelAdapter = new ChannelAdapter(this,this);        channelAdapter.setDatas(channelList);        channelAdapter.setHeaderVisible(false);        channelAdapter.setFooterVisible(false);        mRvChannels.setAdapter(channelAdapter);        mLayoutPlay.setOnTouchListener(this);        wheelTextAdapter = new WheelTextAdapter(this);        wheelTextAdapter.setDatas(categoryList);        mWvCategory.setViewAdapter(wheelTextAdapter);        mWvCategory.setCyclic(true);        mWvCategory.addScrollingListener(new mOnWheelScrollListener(false));        screenScaleAdapter = new ScreenScaleAdapter(this);        screenScaleAdapter.setDatas(scaleDatas);        mWvScales.setViewAdapter(screenScaleAdapter);        mWvScales.setCyclic(true);        mWvScales.setCurrentItem(0);        mWvScales.addScrollingListener(new mOnWheelScrollListener(true));        screenOrientationUtil = ScreenOrientationUtil.getInstance();        screenOrientationUtil.setLandscape(true);        mHttpRequestHelper = new HttpRequestHelper(this);        mGestureDetector = new GestureDetector(this, new MyGestureListener());        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);        mMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);        mPlayHelper = new PlayHelper(svLive,mHandler);        mRvChannels.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);                if (newState == RecyclerView.SCROLL_STATE_IDLE) {//已停止滑动                    isChannelRecyleViewScrolling = false;                } else if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {//手滑动                    isChannelRecyleViewScrolling = true;                } else if (newState == RecyclerView.SCROLL_STATE_SETTLING) {//松开惯性滑动                    isChannelRecyleViewScrolling = true;                }            }        });    }    private void initData () {        mCpbVoiiceBright.setProgress(50);        isShakeChangeProgram = SharePreferencesUtil.getBoolean(this,Constant.IS_SHAKE_CHANGE_PROGRAM);        if (isShakeChangeProgram) {            ShakeManager.with(this).startShakeListener(this);        }        boolean isShowGentrueTip  = SharePreferencesUtil.getBoolean(this,Constant.IS_SHOW_GENTRUE_TIP);        if (!isShowGentrueTip) {            mLayoutGentrueTip.setVisibility(View.VISIBLE);            SharePreferencesUtil.putBoolean(this,Constant.IS_SHOW_GENTRUE_TIP,true);        }        currentCategoryPosition = SharePreferencesUtil.getInt(this,Constant.CURRENT_CATEGORY_POSITION);        currentPosition = SharePreferencesUtil.getInt(this,Constant.CURRENT_PLAY_POSITION);        livePlayPosition = SharePreferencesUtil.getInt(this,Constant.CURRENT_LIVE_PLAY_POSITION);        String[] scales = getResources().getStringArray(R.array.scale_list);        for (int i=0;i<scales.length;i++) {            ScaleData info = new ScaleData();            info.scale = i;            info.scaleName = scales[i];            scaleDatas.add(info);        }        mWvScales.setCurrentItem(1);        screenScaleAdapter.notifyDataChangedEvent();        Intent intent = getIntent();        if (intent != null) {            List<LiveCategory> categories = (List<LiveCategory>) intent.getSerializableExtra(Constant.CHANNEL_DATA_KEY);            if (categories != null && categories.size() > 0) {                categoryList.clear();                categoryList.addAll(categories);                LiveCategory category = new LiveCategory();                category.setChannel_category(getResources().getString(R.string.diy_channel_title));                categoryList.add(category);                mWvCategory.setCurrentItem(currentCategoryPosition);                wheelTextAdapter.notifyDataChangedEvent();                List<Channel> channels = categoryList.get(currentCategoryPosition).getChannels();                if (channels != null && channels.size() > 0) {                    channelList.clear();                    channelList.addAll(channels);                    channelAdapter.notifyDataSetChanged();                }            }        }        play(true);    }    private void initLoadingAnimi(){        mAnimRotate = AnimationUtils.loadAnimation(this, R.anim.animi_rotate);        mAnimRotate.setInterpolator(new LinearInterpolator());//重复播放不停顿        mAnimRotate.setFillAfter(true);//停在最后        runLoadingAnim = (AnimationDrawable) mIvRunLoading.getBackground();        playLoadingAnim = (AnimationDrawable) mIvPlayLoading.getBackground();        //显示View动画        mAnimShowChannels = AnimationUtils.loadAnimation(this, R.anim.channel_translateback);        mAnimShowChannels.setFillAfter(true);        //隐藏View动画        mAnimHideChannels = AnimationUtils.loadAnimation(this, R.anim.channel_translate);        mAnimHideChannels.setFillAfter(true);        //隐藏音量亮度view动画        mAnimAlpha = AnimationUtils.loadAnimation(this, R.anim.animi_alpha);        mAnimAlpha.setFillAfter(true);    }    private void startLoadingAnim () {        mIvPlayLoading.setVisibility(View.VISIBLE);        mMtvNetSpeed.setVisibility(View.VISIBLE);        mIvRunFold.startAnimation(mAnimRotate);        runLoadingAnim.start();        playLoadingAnim.start();    }    private void stopLoadingAnim () {        mIvRunFold.clearAnimation();        runLoadingAnim.stop();        playLoadingAnim.stop();        mIvPlayLoading.setVisibility(View.GONE);        mMtvNetSpeed.setVisibility(View.GONE);    }    /**     * 播放从下向上移动动画显示view     */    private void showViewAnim() {        if (mLayoutChannel.getVisibility() == View.VISIBLE) {            return;        }        mLayoutChannel.setVisibility(View.VISIBLE);        mLayoutChannel.startAnimation(mAnimShowChannels);        mHandler.removeMessages(Constant.Msg.HIDE_PLAY_CTRL_VIEW);        mHandler.sendEmptyMessageDelayed(Constant.Msg.HIDE_PLAY_CTRL_VIEW, 5000);    }    /**     * 播放从上向下移动动画隐藏view     */    private void hiddenViewAnim() {        if (mLayoutChannel.getVisibility() == View.GONE) {            return;        }        if (isChannelRecyleViewScrolling) {            mHandler.removeMessages(Constant.Msg.HIDE_PLAY_CTRL_VIEW);            mHandler.sendEmptyMessageDelayed(Constant.Msg.HIDE_PLAY_CTRL_VIEW, 5000);            return;        }        mLayoutChannel.startAnimation(mAnimHideChannels);        mLayoutChannel.setVisibility(View.GONE);        mLayoutEpgTip.setVisibility(View.GONE);    }    private void play (boolean isPlayLast) {        if (isPlayLast || channelList.size() == 0) {//首次播放默认频道或最后一次播放的频道            String lastPlayUrl = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_URL,Constant.DEFAULT_PLAY_URL);            String lastPlayEpg = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_EPG,Constant.DEFAULT_EPG_URL);            String lastPlayChannel = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_NAME,getString(R.string.default_channel));            tips.clear();            tips.add(lastPlayChannel);            mTvTip.setTipList(tips);            mPlayHelper.play(lastPlayUrl);            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_LIVE_EPG,lastPlayEpg);            return;        }        if (currentPosition < 0) {            currentPosition = channelList.size() - 1;        }        if (currentPosition >= channelList.size()) {            currentPosition = 0;        }        List<ChannelUrl> playUrls = channelList.get(currentPosition).getPlay_urls();        if (playUrls == null || playUrls.size() == 0) {            livePlayPosition = 0;            mIvMaintenance.setVisibility(View.VISIBLE);            return;        }        if (livePlayPosition < 0) {            livePlayPosition = playUrls.size() - 1;        }        if (livePlayPosition >= playUrls.size()) {            livePlayPosition = 0;        }        SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_NAME,channelList.get(currentPosition).getChannel_name());        String url = channelList.get(currentPosition).getPlay_urls().get(livePlayPosition).getPlay_url();        SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_URL,url);        SharePreferencesUtil.putInt(this,Constant.CURRENT_PLAY_POSITION,currentPosition);        SharePreferencesUtil.putInt(this,Constant.CURRENT_LIVE_PLAY_POSITION,livePlayPosition);        mPlayHelper.play(url);        String epg = channelList.get(currentPosition).getEpg();        tips.clear();        tips.add(channelList.get(currentPosition).getChannel_name());        mTvTip.setTipList(tips);        if (!TextUtils.isEmpty(epg)) {            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_LIVE_EPG,epg);            SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_EPG,epg);        }    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof EpgData) {            EpgData epgData = (EpgData) data;            List<EpgInfo> epgs = EpgUtil.getEpgByTime(epgData);            if (epgData.status == Constant.Msg.REQUEST_SUCCESS) {                if (epgs != null && epgs.size() > 0) {                    Message msg = new Message();                    msg.what = Constant.Msg.SHOW_LIVE_EPG;                    msg.obj = epgs;                    mHandler.sendMessage(msg);                }            }        }    }    @Override    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {        int action = (int) l;        switch (action) {            case Constant.Action.ON_CATEGORY_ITEM_CLICK:                break;            case Constant.Action.ON_CHANNEL_ITEM_CLICK:                currentPosition = i;                if (i < channelList.size()) {                    if (channelList.get(i).get_id() == Constant.Action.DIY_CHANNEL) {                        new MaterialDialog.Builder(this)                                .title(R.string.add_diy_channel)                                .icon(new IconicsDrawable(this)                                        .color(ThemeUtils.getThemeColor(this, R.attr.colorPrimary))                                        .icon(MaterialDesignIconic.Icon.gmi_account_add)                                        .sizeDp(20))                                .positiveText(R.string.confirm)                                .input(getString(R.string.enter_play_url), null, new MaterialDialog.InputCallback() {                                    @Override                                    public void onInput(@NonNull MaterialDialog dialog, CharSequence input) {                                        int count = DbDao.getInstance(getApplicationContext()).queryDiyChannelCount();                                        Channel info = new Channel();                                        info.setChannel_name(getString(R.string.diy_channel_title) + (count + 1));                                        List<ChannelUrl> diyUrls = new ArrayList<>();                                        ChannelUrl url = new ChannelUrl();                                        url.setPlay_url(input.toString());                                        diyUrls.add(url);                                        info.setPlay_urls(diyUrls);                                        DbDao.getInstance(getApplicationContext()).insertChannel(info);                                        List<Channel> diyChannels = DbDao.getInstance(getApplicationContext()).queryChannel();                                        channelList.clear();                                        channelList.addAll(diyChannels);                                        Channel channel = new Channel();                                        channel.setChannel_name(getResources().getString(R.string.add_diy_channel));                                        channel.set_id(Constant.Action.DIY_CHANNEL);                                        channelList.add(channel);                                        channelAdapter.notifyDataSetChanged();                                    }                                })                                .show();                        return;                    }                    play(false);                }                break;        }    }    @Override    protected void onStart() {        super.onStart();        screenOrientationUtil.start(this);    }    @Override    protected void onStop() {        super.onStop();        screenOrientationUtil.stop();    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        if(mPlayHelper != null){            mPlayHelper.onDestroy();        }        super.onDestroy();        if (isShakeChangeProgram) {            ShakeManager.with(getApplicationContext()).cancel();        }    }    private void onVolumeSlide(float percent) {        if (mVolume == -1) {            mVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);            if (mVolume < 0) {                mVolume = 0;            }            mIvVoiiceBright.setImageResource(R.mipmap.ic_voice);            mLayoutVoiceBright.setVisibility(View.VISIBLE);        }        int progress = (int) (percent * mMaxVolume) + mVolume;        if (progress > mMaxVolume) {            progress = mMaxVolume;        } else if (progress < 0) {            progress = 0;        }        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);        mCpbVoiiceBright.setProgress(progress * 100 / mMaxVolume);    }    private void onBrightnessSlide(float percent) {        if (mBrightness < 0) {            mBrightness = getWindow().getAttributes().screenBrightness;            if (mBrightness <= 0.00f) {                mBrightness = 0.50f;            }            if (mBrightness < 0.01f) {                mBrightness = 0.01f;            }            mIvVoiiceBright.setImageResource(R.mipmap.ic_bright);            mLayoutVoiceBright.setVisibility(View.VISIBLE);        }        WindowManager.LayoutParams lpa = getWindow().getAttributes();        lpa.screenBrightness = mBrightness + percent;        if (lpa.screenBrightness > 1.0f) {            lpa.screenBrightness = 1.0f;        } else if (lpa.screenBrightness < 0.01f) {            lpa.screenBrightness = 0.01f;        }        getWindow().setAttributes(lpa);        double currentBrightness = lpa.screenBrightness * 100;        mCpbVoiiceBright.setProgress((float) currentBrightness);    }    /**     * 滑动快进快退     * @param percent     */    private void onSeekSlide(float percent) {        if (mPlayHelper != null && mPlayHelper.getPlayer() != null && mDuration > 0) {            int current = mPlayHelper.getPlayer().getCurrentPosition();            int progress = (int) (current + (percent * mDuration));            if (progress > mDuration) {                progress = (int) mDuration;            }            mPlayHelper.getPlayer().seekTo(progress);        }    }    @Override    public boolean onTouch(View view, MotionEvent motionEvent) {        if (mGestureDetector.onTouchEvent(motionEvent)){            return true;        }        switch (motionEvent.getAction()) {            case MotionEvent.ACTION_DOWN:                break;            case MotionEvent.ACTION_MOVE:                break;            case MotionEvent.ACTION_UP:                endGesture();                break;            default:                break;        }        return super.onTouchEvent(motionEvent);    }    @Override    public void OnShake() {        currentPosition++;        play(false);    }    private class MyGestureListener extends GestureDetector.SimpleOnGestureListener {        @Override        public boolean onScroll(MotionEvent e1, MotionEvent e2,                                float distanceX, float distanceY) {            isPlayNext = false;            isPlayPrev = false;            isSourceNext = false;            isSourcePrev = false;            float mOldX = e1.getX(), mOldY = e1.getY();            int x = (int) e2.getRawX();            int y = (int) e2.getRawY();            Display disp = getWindowManager().getDefaultDisplay();            int windowWidth = disp.getWidth();            int windowHeight = disp.getHeight();            if (mOldX > windowWidth * 2.0 / 3) {//如果是在离屏幕左侧 2/3（即 离屏幕右侧1/3）区域上下滑动则改变音量                onVolumeSlide((mOldY - y) / windowHeight);            } else if (mOldX < windowWidth * 1.0 / 3) {//如果是在离屏幕左侧 1/3（区域上下滑动则改变亮度                onBrightnessSlide((mOldY - y) / windowHeight);            } else if (mOldX > windowWidth * 1.0 / 3 && mOldX < windowWidth * 2.0 / 3) {//如果是在离屏幕左侧 1/3到2/3区域（即屏幕中间）上下滑动则切换频道                double sideWidth = Math.abs(mOldX - x);                double sideHeight = Math.abs(mOldY - y);                double distance = sideWidth - sideHeight;                if (distance > 100) {//水平滑动                    onSeekSlide((x - mOldX) / windowWidth);                    if (mOldX > x) {                        isSourcePrev = true;                        isSourceNext = false;                        isPlayNext = false;                        isPlayPrev = false;                    } else {                        isSourceNext = true;                        isSourcePrev = false;                        isPlayNext = false;                        isPlayPrev = false;                    }                } else if (distance < -100){//垂直滑动                    if (mOldY > y) {                        isPlayNext = true;                        isPlayPrev = false;                        isSourceNext = false;                        isSourcePrev = false;                    } else {                        isPlayPrev = true;                        isPlayNext = false;                        isSourceNext = false;                        isSourcePrev = false;                    }                }            }            return super.onScroll(e1, e2, distanceX, distanceY);        }    }    class mOnWheelScrollListener implements OnWheelScrollListener {        private boolean isScaleChange;        public mOnWheelScrollListener (boolean isScaleChange) {            this.isScaleChange = isScaleChange;        }        @Override        public void onScrollingStarted(WheelView wheel) {        }        @Override        public void onScrollingFinished(WheelView wheel) {            if (isScaleChange) {//切换画面比例                int index = wheel.getCurrentItem();                if (index < scaleDatas.size()) {                    TVLiveUtils.setScreenScales(getApplicationContext(),svLive,scaleDatas.get(index).scale);                }            } else {//切换直播列表分类                currentCategoryPosition = wheel.getCurrentItem();                SharePreferencesUtil.putInt(getApplicationContext(),Constant.CURRENT_CATEGORY_POSITION,currentCategoryPosition);                if (currentCategoryPosition < categoryList.size()) {                    channelList.clear();                    if (currentCategoryPosition == categoryList.size() - 1) {//最后一个是自定义频道                        List<Channel> diyChannels = DbDao.getInstance(LiveActivity.this).queryChannel();                        channelList.addAll(diyChannels);                        Channel channel = new Channel();                        channel.setChannel_name(getResources().getString(R.string.add_diy_channel));                        channel.set_id(Constant.Action.DIY_CHANNEL);                        channelList.add(channel);                    } else {                        channelList.addAll(categoryList.get(currentCategoryPosition).getChannels());                    }                    channelAdapter.notifyDataSetChanged();                }            }        }    }    @OnClick({R.id.fl_play})    public void onClick (View view) {        switch (view.getId()) {            case R.id.fl_play:                showViewAnim();                break;        }    }    private void endGesture() {        mVolume = -1;        mBrightness = -1f;        mLayoutVoiceBright.setVisibility(View.GONE);        mLayoutGentrueTip.setVisibility(View.GONE);        if (isPlayNext) {            currentPosition++;            if (currentCategoryPosition == categoryList.size() - 1 && currentPosition == channelList.size() - 1) {                currentPosition = 0;            }            play(false);        } else if (isPlayPrev) {            currentPosition--;            if (currentCategoryPosition == categoryList.size() - 1 && currentPosition < 0) {                currentPosition = channelList.size() - 2;            }            play(false);        } else if (isSourceNext) {            livePlayPosition++;            play(false);        } else if (isSourcePrev) {            livePlayPosition--;            play(false);        }        isPlayNext = false;        isPlayPrev = false;        isSourceNext = false;        isSourcePrev = false;    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        switch (keyCode) {            case KeyEvent.KEYCODE_VOLUME_UP: {                mIvVoiiceBright.setImageResource(R.mipmap.ic_voice);                mLayoutVoiceBright.setVisibility(View.VISIBLE);                int progress = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);                progress ++;                if (progress > mMaxVolume) {                    progress = mMaxVolume;                } else if (progress < 0) {                    progress = 0;                }                mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);                mCpbVoiiceBright.setProgress(progress * 100 / mMaxVolume);                return true;            }            case KeyEvent.KEYCODE_VOLUME_DOWN:{                mIvVoiiceBright.setImageResource(R.mipmap.ic_voice);                mLayoutVoiceBright.setVisibility(View.VISIBLE);                int progress = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);                progress --;                if (progress > mMaxVolume) {                    progress = mMaxVolume;                } else if (progress < 0) {                    progress = 0;                }                mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);                mCpbVoiiceBright.setProgress(progress * 100 / mMaxVolume);                return true;            }            case KeyEvent.KEYCODE_MENU: {                if (mLayoutEpgTip.getVisibility() == View.GONE) {                    mLayoutEpgTip.setVisibility(View.VISIBLE);                } else {                    mLayoutEpgTip.setVisibility(View.GONE);                }                return true;            }        }        return super.onKeyDown(keyCode, event);    }    @Override    public boolean onKeyUp(int keyCode, KeyEvent event) {        switch (keyCode) {            case KeyEvent.KEYCODE_VOLUME_UP: {                mLayoutVoiceBright.setVisibility(View.GONE);                return true;            }            case KeyEvent.KEYCODE_VOLUME_DOWN:{                mLayoutVoiceBright.setVisibility(View.GONE);                return true;            }        }        return super.onKeyUp(keyCode, event);    }    Runnable netSpeedRunnable = new Runnable(){        @Override        public void run() {            // TODO Auto-generated method stub            Message msg = mHandler.obtainMessage(Constant.Msg.SHOW_NETSPEED);            msg.obj = NetSpeedUtil.calculateNetSpeed();            msg.sendToTarget();        }    };}