package com.victor.seagull;import android.content.Intent;import android.os.Bundle;import android.support.annotation.ColorInt;import android.support.annotation.NonNull;import android.support.design.widget.NavigationView;import android.support.v4.app.Fragment;import android.support.v4.view.GravityCompat;import android.support.v4.view.ViewCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.animation.DecelerateInterpolator;import android.widget.ImageView;import android.widget.RelativeLayout;import com.afollestad.materialdialogs.MaterialDialog;import com.afollestad.materialdialogs.color.ColorChooserDialog;import com.mikepenz.iconics.IconicsDrawable;import com.mikepenz.material_design_iconic_typeface_library.MaterialDesignIconic;import com.victor.fragment.ProgramFragment;import com.victor.util.Constant;import com.victor.util.DataCleanManager;import com.victor.util.DensityUtil;import com.victor.util.SharePreferencesUtil;import com.victor.util.SnackbarUtil;import com.victor.util.ThemeUtils;import com.victor.widget.ColorFloatingActionButton;import com.victor.widget.InsetsAppBarLayout;import com.victor.widget.InsetsToolbar;public class MainActivity extends BaseActivity implements ColorChooserDialog.ColorCallback,        NavigationView.OnNavigationItemSelectedListener,View.OnClickListener {    private String TAG = "MainActivity";    private View view;    private InsetsAppBarLayout mToolBarLayout;    private InsetsToolbar toolbar;    private NavigationView navigationView;    private ActionBarDrawerToggle toggle;    private  DrawerLayout drawer;    private RelativeLayout mainParent;    private ImageView bubblesIv;    private ColorFloatingActionButton mFab;    private Fragment currentFragment;    private boolean actionBarShown = true;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        view = getLayoutInflater().from(this).inflate(R.layout.activity_main,null);        setContentView(view);        initialize();    }    private void initialize() {        switchFragment(new ProgramFragment());        mToolBarLayout = (InsetsAppBarLayout) findViewById(R.id.appbar_layout);        toolbar = (InsetsToolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        injectViewsAndSetUpToolbar();        // 左上角 Menu 按钮        drawer = (DrawerLayout) findViewById(R.id.drawer_layout);        toggle = new ActionBarDrawerToggle(this, drawer, toolbar,                R.string.navigation_drawer_open, R.string.navigation_drawer_close);        drawer.setDrawerListener(toggle);        toggle.syncState();        // 菜单        navigationView = (NavigationView) findViewById(R.id.nav_view);        navigationView.setNavigationItemSelectedListener(this);        mainParent = (RelativeLayout) findViewById(R.id.main_parent_rl);        bubblesIv = (ImageView) findViewById(R.id.bubbles_iv);        mFab = (ColorFloatingActionButton) findViewById(R.id.fab);        mFab.setOnClickListener(this);    }    private void switchFragment(Fragment fragment) {        if (currentFragment == null || !fragment.getClass().getName().equals(currentFragment.getClass().getName())) {            getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment).commit();            currentFragment = fragment;        }    }    public RelativeLayout getMainParent () {        return mainParent;    }    public ImageView getBubblesIv () {        return bubblesIv;    }    protected void injectViewsAndSetUpToolbar() {        ViewCompat.setElevation(mToolBarLayout, DensityUtil.dip2px(this, 4.0F));    }    public void showActionbar(boolean show, boolean animate) {        if (animate) {            autoShowOrHideActionBar(show);        } else {            if (show) {                getSupportActionBar().show();            } else {                getSupportActionBar().hide();            }        }    }    public void setToolbarAlpha(float alpha) {        mToolBarLayout.getBackground().setAlpha((int) (alpha * 255));    }    protected void autoShowOrHideActionBar(boolean show) {        if (show == actionBarShown) {            return;        }        actionBarShown = show;        onActionBarAutoShowOrHide(show);    }    protected void onActionBarAutoShowOrHide(boolean shown) {        View view = mToolBarLayout;        if (shown) {            view.animate()                    .translationY(0)                    .alpha(1)                    .setDuration(Constant.HEADER_HIDE_ANIM_DURATION)                    .setInterpolator(new DecelerateInterpolator());        } else {            view.animate()                    .translationY(-view.getBottom())                    .alpha(0)                    .setDuration(Constant.HEADER_HIDE_ANIM_DURATION)                    .setInterpolator(new DecelerateInterpolator());        }    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.fab:                new MaterialDialog.Builder(this)                        .title(R.string.about)                        .icon(new IconicsDrawable(this)                                .color(ThemeUtils.getThemeColor(this, R.attr.colorPrimary))                                .icon(MaterialDesignIconic.Icon.gmi_account)                                .sizeDp(20))                        .content(R.string.about_me)                        .positiveText(R.string.close)                        .show();                break;        }    }    @Override    public void onColorSelection(@NonNull ColorChooserDialog dialog, @ColorInt int selectedColor) {        ThemeUtils.setTheme(this,selectedColor);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.action_share:                Intent intentshare = new Intent(Intent.ACTION_SEND);                intentshare.setType(Constant.SHARE_TYPE)                        .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share))                        .putExtra(Intent.EXTRA_TEXT,getString(R.string.share_app));                Intent.createChooser(intentshare, getString(R.string.share));                startActivity(intentshare);                return true;            case R.id.action_gank:                Intent intent = new Intent(MainActivity.this,GankActivity.class);                startActivity(intent);                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    public boolean onNavigationItemSelected(@NonNull MenuItem item) {        switch (item.getItemId()) {            case R.id.nav_auto_update:                SnackbarUtil.ShortSnackbar(mainParent,getString(R.string.auto_update_opened)).show();                break;            case R.id.nav_clear:                DataCleanManager.cleanApplicationData(this);                SnackbarUtil.ShortSnackbar(mainParent,getString(R.string.all_cache_cleaned)).show();                break;            case R.id.nav_shake:                boolean isShakeChangeProgram = SharePreferencesUtil.getBoolean(this,Constant.IS_SHAKE_CHANGE_PROGRAM);                SharePreferencesUtil.putBoolean(this,Constant.IS_SHAKE_CHANGE_PROGRAM,!isShakeChangeProgram);                if (isShakeChangeProgram) {                    SnackbarUtil.ShortSnackbar(mainParent,getString(R.string.shake_change_closed)).show();                } else {                    SnackbarUtil.ShortSnackbar(mainParent,getString(R.string.shake_change_opened)).show();                }                break;            case R.id.nav_copyright:                new MaterialDialog.Builder(this)                        .title(R.string.copyright)                        .icon(new IconicsDrawable(this)                                .color(ThemeUtils.getThemeColor(this, R.attr.colorPrimary))                                .icon(MaterialDesignIconic.Icon.gmi_account)                                .sizeDp(20))                        .content(R.string.copyright_content)                        .positiveText(R.string.close)                        .show();                break;            case R.id.nav_theme:                new ColorChooserDialog.Builder(this, R.string.theme)                        .customColors(R.array.colors, null)                        .doneButton(R.string.done)                        .cancelButton(R.string.cancel)                        .allowUserColorInput(false)                        .allowUserColorInputAlpha(false)                        .show();                break;            case R.id.nav_about:                new MaterialDialog.Builder(this)                        .title(R.string.about)                        .icon(new IconicsDrawable(this)                                .color(ThemeUtils.getThemeColor(this, R.attr.colorPrimary))                                .icon(MaterialDesignIconic.Icon.gmi_account)                                .sizeDp(20))                        .content(R.string.about_me)                        .positiveText(R.string.close)                        .show();                break;        }        drawer.closeDrawer(GravityCompat.START);        return true;    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        switch (keyCode) {            case KeyEvent.KEYCODE_BACK:                if (drawer.isDrawerOpen(GravityCompat.START)) {                    drawer.closeDrawer(GravityCompat.START);                    return true;                }                break;        }        return super.onKeyDown(keyCode, event);    }}