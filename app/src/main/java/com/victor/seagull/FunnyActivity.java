package com.victor.seagull;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.design.widget.CollapsingToolbarLayout;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.view.MenuItem;import android.widget.ImageView;import com.bumptech.glide.Glide;import com.victor.adapter.FunnyAdapter;import com.victor.model.data.FunnyContentData;import com.victor.model.data.FunnyData;import com.victor.module.DataObservable;import com.victor.presenter.FunnyPresenter;import com.victor.presenter.impl.FunnyPresenterImpl;import com.victor.seagull.view.FunnyView;import com.victor.util.Constant;import com.victor.util.Loger;import com.victor.util.SharePreferencesUtil;import com.victor.util.SnackbarUtil;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Observable;public class FunnyActivity extends BaseActivity implements FunnyView {    private String TAG = "FunnyActivity";    private Toolbar toolbar;    private  CollapsingToolbarLayout collapsingToolbar;    private RecyclerView recyclerView;    private ImageView mIvBackDrop;    private LinearLayoutManager linearLayoutManager;    private FunnyAdapter funnyAdapter;    private List<FunnyContentData> funnyContentDatas = new ArrayList<>();    private FunnyPresenter funnyPresenter;    private String meiPaiUrl = "";    private String headImgUrl = "";    private SimpleDateFormat sdf;    private  int currentPage = 1;//当前页数    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Action.SHARE_FUNNY:                    Intent intentshare = new Intent(Intent.ACTION_SEND);                    intentshare.setType(Constant.SHARE_TYPE)                            .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share))                            .putExtra(Intent.EXTRA_TEXT,getString(R.string.share_funny) + msg.obj);                    Intent.createChooser(intentshare, getString(R.string.share));                    startActivity(intentshare);                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_funny);        initialize();        initData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);        collapsingToolbar.setTitle(getString(R.string.app_title));        mIvBackDrop = (ImageView) findViewById(R.id.iv_backdrop);        recyclerView = (RecyclerView) findViewById(R.id.recycler_view);        linearLayoutManager = new LinearLayoutManager(this);//这里用线性显示 类似于listview        recyclerView.setLayoutManager(linearLayoutManager);        funnyAdapter = new FunnyAdapter(this);        funnyAdapter.setMeiPaiContentDatas(funnyContentDatas);        funnyAdapter.setHeaderVisible(false);        funnyAdapter.setFooterVisible(false);        recyclerView.setAdapter(funnyAdapter);        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();                if (lastVisibleItemPosition + 1 == funnyAdapter.getItemCount()) {                    currentPage ++;                    if (sdf == null) {                        sdf = new SimpleDateFormat(Constant.TIME_FORMAT);                    }                    String time = sdf.format(new Date());                    funnyPresenter.getFunny(meiPaiUrl,currentPage,time);                }            }        });        funnyPresenter = new FunnyPresenterImpl(this);    }    private void initData () {        meiPaiUrl = SharePreferencesUtil.getString(this,Constant.CURRENT_MEI_PAI_URL,"");        headImgUrl = SharePreferencesUtil.getString(this,Constant.HEAD_IMG_URL,"");        Glide.with(getApplicationContext()).load(headImgUrl).fitCenter().into(mIvBackDrop);        sdf = new SimpleDateFormat(Constant.TIME_FORMAT);        String time = sdf.format(new Date());        funnyPresenter.getFunny(meiPaiUrl,currentPage,time);    }    @Override    public void showLoading() {        funnyAdapter.setFooterVisible(true);    }    @Override    public void hideLoading() {        funnyAdapter.setFooterVisible(false);    }    @Override    public void showError(String error) {        if (currentPage == 1) {            funnyContentDatas.clear();            funnyAdapter.setFooterVisible(false);            funnyAdapter.notifyDataSetChanged();        }        SnackbarUtil.ShortSnackbar(recyclerView,error,SnackbarUtil.WARNING).show();    }    @Override    public void setFunnyInfo(FunnyData funnyData) {        List<FunnyContentData> tmpList = funnyData.getShowapi_res_body().getPagebean().getContentlist();        funnyContentDatas.addAll(tmpList);        funnyAdapter.notifyDataSetChanged();    }    @Override    public void update(Observable observable, Object data) {        super.update(observable, data);        if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int action = bundle.getInt(Constant.ACTION_KEY);            if (action == Constant.Action.SHARE_FUNNY) {                String imgUrl = bundle.getString(Constant.INTENT_DATA_KEY);                Message msg = new Message();                msg.what = Constant.Action.SHARE_FUNNY;                msg.obj = imgUrl;                mHandler.sendMessage(msg);            }        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();    }}