package com.victor.seagull;import android.annotation.TargetApi;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.graphics.Color;import android.graphics.Point;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.design.widget.AppBarLayout;import android.support.design.widget.CollapsingToolbarLayout;import android.support.design.widget.FloatingActionButton;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.MenuItem;import android.view.TextureView;import android.view.View;import android.view.ViewGroup;import android.view.ViewParent;import android.view.Window;import android.widget.AdapterView;import android.widget.FrameLayout;import android.widget.ImageView;import com.bumptech.glide.Glide;import com.victor.adapter.ScaleInAnimatorAdapter;import com.victor.adapter.YoutubeAdapter;import com.victor.data.YoutubeInfo;import com.victor.data.YoutubeReq;import com.victor.interfaces.AppBarStateChangeListener;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.module.PlayManager;import com.victor.player.library.module.PlayHelper;import com.victor.player.library.module.Player;import com.victor.player.library.util.PlayUtil;import com.victor.presenter.YoutubePresenterImpl;import com.victor.seagull.holder.YoutubeContentViewHolder;import com.victor.seagull.view.YoutubeView;import com.victor.util.Constant;import com.victor.util.Loger;import com.victor.util.SharePreferencesUtil;import com.victor.util.SnackbarUtil;import com.victor.util.StatusBarUtil;import com.victor.util.ToastUtils;import com.victor.widget.ColorMovingTextView;import com.victor.widget.HeartBubbleView;import com.victor.widget.PlayLayout;import java.util.ArrayList;import java.util.List;import java.util.Observable;public class ProgramDetailActivity extends BaseActivity implements View.OnClickListener,        YoutubeView<YoutubeReq>,AdapterView.OnItemClickListener{    private String TAG = "ProgramDetailActivity";    private LinearLayoutManager linearLayoutManager;    private CollapsingToolbarLayout collapsingToolbar;    private AppBarLayout appbarLayout;    private PlayLayout mPlSmallPlay;    private ImageView mIvBackDrop;    private RecyclerView mRvVideo;    private ColorMovingTextView mCmtvTitle;    private FloatingActionButton mFabFullScreen;    private YoutubeAdapter youtubeAdapter;    private List<YoutubeInfo> youtubeInfos = new ArrayList<>();    private HttpRequestHelper mHttpRequestHelper;    private  int currentPage = 1;//当前页数    private int currentPlayPosition;//当前播放位置    private String meiPaiUrl = "";    private String headImgUrl = "";//    private Player mPlayer;    private PlayHelper mPlayHelper;//    private FrameLayout mFlFlay;    private TextureView mTvVideo;    private boolean isSmallScreenPlay;    private YoutubePresenterImpl youtubePresenter;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Player.PLAYER_PREPARING:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_PREPARED:                    mIvBackDrop.setVisibility(View.INVISIBLE);                    break;                case Player.PLAYER_ERROR:                    break;                case Player.PLAYER_BUFFERING_START:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_BUFFERING_END:                    break;                case Player.PLAYER_PROGRESS_INFO:                    break;                case Player.PLAYER_COMPLETE:                    currentPlayPosition++;                    play();                    break;                case Constant.Msg.DRAW_HEART_BUBBLE:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {                        if (mPlayHelper.getPlayer().isPlaying()) {                            return;                        }                    }                    drawHeartBubble();                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Constant.Action.SHARE_MEIPAI:                    Intent intentshare = new Intent(Intent.ACTION_SEND);                    intentshare.setType(Constant.SHARE_TYPE)                            .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share))                            .putExtra(Intent.EXTRA_TEXT,getString(R.string.share_meipai) + msg.obj);                    Intent.createChooser(intentshare, getString(R.string.share));                    startActivity(intentshare);                    break;                case Constant.Action.PLAY_MEIPAI_VIDEO://                    mFlFlay.removeAllViews();//                    mPlSmallPlay.removeAllViews();//                    mPlSmallPlay.addView(PlayManager.getInstanse().getTextureView());//                    mIvBackDrop.setVisibility(View.VISIBLE);                    play();                    break;                case Constant.Msg.REQUEST_YOUTUBE:                    youtubeInfos = (List<YoutubeInfo>) msg.obj;                    youtubeAdapter.clear();                    youtubeAdapter.add(youtubeInfos);                    youtubeAdapter.notifyDataSetChanged();                    play();                    break;            }        }    };    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_program_detail);        initialize();        initData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(this);        youtubePresenter = new YoutubePresenterImpl(this);//        mFlFlay = (FrameLayout) findViewById(R.id.fl_play_container);        mTvVideo = (TextureView) findViewById(R.id.tv_video);        PlayManager.getInstanse().setTextureView(mTvVideo);        mPlayHelper = new PlayHelper(mTvVideo,mHandler);//        mPlayHelper.play("SMcXGeltEQQ");        appbarLayout = (AppBarLayout) findViewById(R.id.appbar);        mPlSmallPlay = (PlayLayout) findViewById(R.id.pl_small_play);        mIvBackDrop = (ImageView) findViewById(R.id.iv_backdrop);        mRvVideo = (RecyclerView) findViewById(R.id.rv_channels);        mCmtvTitle = (ColorMovingTextView) findViewById(R.id.mtv_channel);        mFabFullScreen = (FloatingActionButton) findViewById(R.id.fab_fullscreen);        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);        collapsingToolbar.setTitle(getString(R.string.seriously_funny));//        mPlayer = new Player(this,mSvVideo,mHandler,null);        linearLayoutManager = new LinearLayoutManager(this);//这里用线性显示 类似于listview        mRvVideo.setLayoutManager(linearLayoutManager);        youtubeAdapter = new YoutubeAdapter(this,this);        youtubeAdapter.setDatas(youtubeInfos);        youtubeAdapter.setHeaderVisible(false);        youtubeAdapter.setFooterVisible(false);//        mRvVideo.setAdapter(meiPaiAdapter);        ScaleInAnimatorAdapter animatorAdapter = new ScaleInAnimatorAdapter(youtubeAdapter, mRvVideo);//        AlphaAnimatorAdapter animatorAdapter = new AlphaAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInBottomAnimatorAdapter animatorAdapter = new SlideInBottomAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInLeftAnimatorAdapter animatorAdapter = new SlideInLeftAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInRightAnimatorAdapter animatorAdapter = new SlideInRightAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SwingBottomInAnimationAdapter animatorAdapter = new SwingBottomInAnimationAdapter(meiPaiAdapter, mRvVideo);        mRvVideo.setAdapter(animatorAdapter);        mFabFullScreen.setOnClickListener(this);        mRvVideo.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();                if (lastVisibleItemPosition + 1 == youtubeAdapter.getItemCount()) {                    currentPage ++;//                    meiPaiPresenter.getDatas(meiPaiUrl,currentPage);                }            }        });        appbarLayout.addOnOffsetChangedListener(new AppBarStateChangeListener() {            @Override            public void onStateChanged(AppBarLayout appBarLayout, State state) {                Log.d("STATE", state.name());                if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {                    if (!mPlayHelper.getPlayer().isPlaying()) {                        return;                    }                }                if( state == State.EXPANDED ) {                    //展开状态                    mIvBackDrop.setVisibility(View.INVISIBLE);                    mPlSmallPlay.setVisibility(View.GONE);                    removePlayViewFormParent();                    collapsingToolbar.addView(PlayManager.getInstanse().getTextureView(),2);                    isSmallScreenPlay = false;                }else if(state == State.COLLAPSED){                    //折叠状态                    mIvBackDrop.setVisibility(View.VISIBLE);                    mPlSmallPlay.setVisibility(View.VISIBLE);                    removePlayViewFormParent();                    mPlSmallPlay.addView(PlayManager.getInstanse().getTextureView());                    isSmallScreenPlay = true;                }else {                    //中间状态                }            }        });    }    private void initData () {        meiPaiUrl = SharePreferencesUtil.getString(this,Constant.CURRENT_MEI_PAI_URL,"");        headImgUrl = SharePreferencesUtil.getString(this,Constant.HEAD_IMG_URL,"");        Glide.with(getApplicationContext()).load(headImgUrl).fitCenter().into(mIvBackDrop);//        ImageUtils.get().loadImage(mIvBackDrop,headImgUrl,R.mipmap.default_img);   /*     for (int i=0;i<10;i++) {            MeiPaiUser user = new MeiPaiUser();            user.setAvatar("http://ww1.sinaimg.cn/large/0065oQSqly1frsllc19gfj30k80tfah5.jpg");            Media media = new Media();            media.setVideo("");            media.setCaption("");            media.setComments_count(66);            media.setLikes_count(66);            media.setLikes_count(99);            media.setUser(user);            MeiPaiData data = new MeiPaiData();            data.setRecommend_cover_pic("http://ww1.sinaimg.cn/large/0065oQSqly1fryyn63fm1j30sg0yagt2.jpg");            data.setRecommend_caption("");            data.setMedia(media);            meiPaiDatas.add(data);        }        meiPaiAdapter.notifyDataSetChanged();*/        sendYoutuebRequest();    }    private void sendYoutuebRequest () {//        youtubePresenter.sendRequest(meiPaiUrl,null,null);        int videoType = PlayUtil.getVideoType(meiPaiUrl);        switch (videoType) {            case com.victor.player.library.util.Constant.VideoType.YOUTUBE:                Loger.e(TAG,"START REQUEST YOUTUBE DATA......");                mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_YOUTUBE,meiPaiUrl);                break;            case com.victor.player.library.util.Constant.VideoType.VIMEO:                Loger.e(TAG,"START REQUEST VIMEO DATA......");                mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_VIMEO,meiPaiUrl);                break;        }    }    private void requestMeiPaiDatas () {        if (mHttpRequestHelper != null) {            Bundle bundle = new Bundle();            bundle.putInt(Constant.CURRENT_PAGE_KEY,currentPage);            bundle.putString(Constant.CURRENT_MEI_PAI_URL,meiPaiUrl);            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.MEIPAI_REQUEST, bundle);        }    }    /**     * 心形气泡动感效果     */    private void drawHeartBubble () {        int position[] = new int[2];        HeartBubbleView heartBubbleView = new HeartBubbleView(this);        mFabFullScreen.getLocationInWindow(position);        heartBubbleView.setStartPosition(new Point(position[0], position[1]));        ViewGroup rootView = (ViewGroup) this.getWindow().getDecorView();        rootView.addView(heartBubbleView);        int endPosition[] = new int[2];//        mFlFlay.getLocationInWindow(endPosition);        heartBubbleView.setEndPosition(new Point(endPosition[0], endPosition[1]));// y 为0 到顶部，x为随机生成        heartBubbleView.startBeizerAnimation();    }    private void play () {        if (youtubeInfos == null || youtubeInfos.size() == 0) {            SnackbarUtil.ShortSnackbar(mRvVideo,getString(R.string.no_play_data),SnackbarUtil.WARNING).show();            return;        }        if (currentPlayPosition >= youtubeInfos.size()) {            currentPlayPosition = 0;        }        String playUrl = youtubeInfos.get(currentPlayPosition).url;        if (!TextUtils.isEmpty(playUrl)) {            mCmtvTitle.setText(youtubeInfos.get(currentPlayPosition).videoName);//                mPlayer.playUrl(playUrl,false);            mPlayHelper.play(playUrl);        } else {            Log.e(TAG, "videoContentData == null or mPlayer == null");            mCmtvTitle.setText("");//            mPlayer.playUrl(Constant.DEFAULT_PLAY_URL,false);            mPlayHelper.play(Constant.DEFAULT_PLAY_URL);        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);//        if (mFlFlay != null) {//            mFlFlay.removeAllViews();//        }        if (mPlSmallPlay != null) {            mPlSmallPlay.removeAllViews();        }        if (mPlayHelper != null) {            mPlayHelper.onDestroy();            mPlayHelper = null;        }        super.onDestroy();    }    @Override    protected void onPause() {        super.onPause();        if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {            mPlayHelper.getPlayer().pause();        }    }    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    @Override    protected void onResume() {        super.onResume();        Window window = getWindow();        window.setStatusBarColor(Color.TRANSPARENT);        if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {            mPlayHelper.getPlayer().resume();        }    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.fab_fullscreen :                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);                StatusBarUtil.hideStatusBar(ProgramDetailActivity.this);                collapsingToolbar.removeView(mTvVideo);                mPlSmallPlay.removeAllViews();                ViewGroup contentView = (ViewGroup) findViewById(android.R.id.content);                FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(                        ViewGroup.LayoutParams.MATCH_PARENT,                        ViewGroup.LayoutParams.MATCH_PARENT);                contentView.addView(PlayManager.getInstanse().getTextureView(), params);                isSmallScreenPlay = false;                break;        }    }    @Override    public void onBackPressed() {        Configuration mConfiguration = this.getResources().getConfiguration(); //获取设置的配置信息        int ori = mConfiguration.orientation; //获取屏幕方向        if (ori == mConfiguration.ORIENTATION_LANDSCAPE) {            //横屏            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);//强制为竖屏            StatusBarUtil.showStatusBar(ProgramDetailActivity.this);            ViewGroup contentView = (ViewGroup) findViewById(android.R.id.content);            contentView.removeView(PlayManager.getInstanse().getTextureView());            if (isSmallScreenPlay) {                mIvBackDrop.setVisibility(View.VISIBLE);                mPlSmallPlay.setVisibility(View.VISIBLE);                mPlSmallPlay.removeAllViews();                mPlSmallPlay.addView(PlayManager.getInstanse().getTextureView());            } else {                mIvBackDrop.setVisibility(View.INVISIBLE);                mPlSmallPlay.setVisibility(View.GONE);                collapsingToolbar.addView(PlayManager.getInstanse().getTextureView(),2);            }            return;        }        super.onBackPressed();    }    private void removePlayViewFormParent() {        ViewParent parent = PlayManager.getInstanse().getTextureView().getParent();        if (parent != null && parent instanceof ViewGroup) {            ((ViewGroup) parent).removeView(PlayManager.getInstanse().getTextureView());        }    }    @Override    public void OnYoutube(YoutubeReq data, String msg) {        if (isFinishing()) return;        if (data == null) {            ToastUtils.showShort("youtueb no resonse data");            return;        }        if (data.data == null || data.data.size() == 0) {            ToastUtils.showShort("youtueb no resonse data");            return;        }        youtubeInfos = data.data;        youtubeAdapter.clear();        youtubeAdapter.add(youtubeInfos);        youtubeAdapter.notifyDataSetChanged();    }    @Override    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {        switch ((int) id) {            case YoutubeContentViewHolder.ON_ITEM_CLICK:                currentPlayPosition = position;                play();                break;            case YoutubeContentViewHolder.ON_ITEM_LONG_CLICK:                shareAction(position);                break;        }    }    private void shareAction (int position) {        if (youtubeInfos != null && youtubeInfos.size() > 0) {            if (position < youtubeInfos.size()) {                Message msg = new Message();                msg.what = Constant.Action.SHARE_MEIPAI;                msg.obj = youtubeInfos.get(position).url;                mHandler.sendMessage(msg);            }        }    }    @Override    public void update(Observable observable, Object data) {        super.update(observable, data);        if (data instanceof YoutubeReq) {            YoutubeReq info = (YoutubeReq) data;            if (info.data != null && info.data.size() > 0) {                Message msg = mHandler.obtainMessage(Constant.Msg.REQUEST_YOUTUBE);                msg.obj = info.data;                msg.sendToTarget();            }        }    }}