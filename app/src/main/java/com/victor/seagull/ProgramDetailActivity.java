package com.victor.seagull;import android.annotation.TargetApi;import android.content.Intent;import android.graphics.Color;import android.graphics.Point;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.design.widget.CollapsingToolbarLayout;import android.support.design.widget.FloatingActionButton;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.MenuItem;import android.view.SurfaceView;import android.view.ViewGroup;import android.view.Window;import android.widget.ImageView;import com.bumptech.glide.Glide;import com.victor.adapter.MeiPaiAdapter;import com.victor.adapter.ScaleInAnimatorAdapter;import com.victor.model.data.Media;import com.victor.model.data.MeiPaiData;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.module.Player;import com.victor.presenter.MeiPaiPresenter;import com.victor.presenter.impl.MeiPaiPresenterImpl;import com.victor.seagull.view.MeiPaiView;import com.victor.util.Constant;import com.victor.util.SharePreferencesUtil;import com.victor.util.SnackbarUtil;import com.victor.widget.ColorMovingTextView;import com.victor.widget.HeartBubbleView;import java.util.ArrayList;import java.util.List;import java.util.Observable;public class ProgramDetailActivity extends BaseActivity implements MeiPaiView {    private String TAG = "ProgramDetailActivity";    private LinearLayoutManager linearLayoutManager;    private SurfaceView mSvVideo;    private ImageView mIvBackDrop;    private RecyclerView mRvVideo;    private ColorMovingTextView mCmtvTitle;    private FloatingActionButton mFabFullScreen;    private MeiPaiAdapter meiPaiAdapter;    private List<MeiPaiData> meiPaiDatas = new ArrayList<>();    private HttpRequestHelper mHttpRequestHelper;    private  int currentPage = 1;//当前页数    private int currentPlayPosition;//当前播放位置    private String meiPaiUrl = "";    private String headImgUrl = "";    private MeiPaiData meiPaiData;    private MeiPaiPresenter meiPaiPresenter;    private Player mPlayer;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Player.PLAYER_PREPARING:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_PREPARED:                    break;                case Player.PLAYER_ERROR:                    break;                case Player.PLAYER_BUFFERING_START:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_BUFFERING_END:                    break;                case Player.PLAYER_PROGRESS_INFO:                    break;                case Player.PLAYER_COMPLETE:                    DataObservable.getInstance().setData(Constant.Action.PLAY_NEXT_MEIPAI_VIDEO);                    break;                case Constant.Msg.DRAW_HEART_BUBBLE:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                        if (mPlayer.getMediaPlayer().isPlaying()) {                            return;                        }                    }                    drawHeartBubble();                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Constant.Action.SHARE_MEIPAI:                    Intent intentshare = new Intent(Intent.ACTION_SEND);                    intentshare.setType(Constant.SHARE_TYPE)                            .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share))                            .putExtra(Intent.EXTRA_TEXT,getString(R.string.share_meipai) + msg.obj);                    Intent.createChooser(intentshare, getString(R.string.share));                    startActivity(intentshare);                    break;                case Constant.Action.PLAY_MEIPAI_VIDEO:                    play();                    break;            }        }    };    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_program_detail);        initialize();        initData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(this);        mSvVideo = (SurfaceView) findViewById(R.id.sv_live);        mIvBackDrop = (ImageView) findViewById(R.id.iv_backdrop);        mRvVideo = (RecyclerView) findViewById(R.id.rv_channels);        mCmtvTitle = (ColorMovingTextView) findViewById(R.id.mtv_channel);        mFabFullScreen = (FloatingActionButton) findViewById(R.id.fab_fullscreen);        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);        collapsingToolbar.setTitle(getString(R.string.seriously_funny));        mPlayer = new Player(this,mSvVideo,mHandler,null);        linearLayoutManager = new LinearLayoutManager(this);//这里用线性显示 类似于listview        mRvVideo.setLayoutManager(linearLayoutManager);        meiPaiAdapter = new MeiPaiAdapter(this);        meiPaiAdapter.setDatas(meiPaiDatas);        meiPaiAdapter.setHeaderVisible(false);        meiPaiAdapter.setFooterVisible(false);//        mRvVideo.setAdapter(meiPaiAdapter);        ScaleInAnimatorAdapter animatorAdapter = new ScaleInAnimatorAdapter(meiPaiAdapter, mRvVideo);//        AlphaAnimatorAdapter animatorAdapter = new AlphaAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInBottomAnimatorAdapter animatorAdapter = new SlideInBottomAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInLeftAnimatorAdapter animatorAdapter = new SlideInLeftAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInRightAnimatorAdapter animatorAdapter = new SlideInRightAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SwingBottomInAnimationAdapter animatorAdapter = new SwingBottomInAnimationAdapter(meiPaiAdapter, mRvVideo);        mRvVideo.setAdapter(animatorAdapter);        mRvVideo.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();                if (lastVisibleItemPosition + 1 == meiPaiAdapter.getItemCount()) {                    currentPage ++;                    meiPaiPresenter.getDatas(meiPaiUrl,currentPage);                }            }        });        meiPaiPresenter = new MeiPaiPresenterImpl(this);    }    private void initData () {        meiPaiUrl = SharePreferencesUtil.getString(this,Constant.CURRENT_MEI_PAI_URL,"");        headImgUrl = SharePreferencesUtil.getString(this,Constant.HEAD_IMG_URL,"");        Glide.with(getApplicationContext()).load(headImgUrl).fitCenter().into(mIvBackDrop);        meiPaiPresenter.getDatas(meiPaiUrl,currentPage);    }    private void requestMeiPaiDatas () {        if (mHttpRequestHelper != null) {            Bundle bundle = new Bundle();            bundle.putInt(Constant.CURRENT_PAGE_KEY,currentPage);            bundle.putString(Constant.CURRENT_MEI_PAI_URL,meiPaiUrl);            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.MEIPAI_REQUEST, bundle);        }    }    /**     * 心形气泡动感效果     */    private void drawHeartBubble () {        int position[] = new int[2];        HeartBubbleView heartBubbleView = new HeartBubbleView(this);        mFabFullScreen.getLocationInWindow(position);        heartBubbleView.setStartPosition(new Point(position[0], position[1]));        ViewGroup rootView = (ViewGroup) this.getWindow().getDecorView();        rootView.addView(heartBubbleView);        int endPosition[] = new int[2];        mSvVideo.getLocationInWindow(endPosition);        heartBubbleView.setEndPosition(new Point(endPosition[0], endPosition[1]));// y 为0 到顶部，x为随机生成        heartBubbleView.startBeizerAnimation();    }    private void play () {        if (meiPaiData != null) {            Media media = meiPaiData.getMedia();            if (media == null) {                SnackbarUtil.ShortSnackbar(mRvVideo,getString(R.string.no_play_data),SnackbarUtil.WARNING).show();                return;            }            String playUrl = media.getVideo();            if (!TextUtils.isEmpty(playUrl)) {                mCmtvTitle.setText(meiPaiData.getMedia().getCaption());                mPlayer.playUrl(playUrl,false);            }        } else {            Log.e(TAG, "videoContentData == null or mPlayer == null");            mCmtvTitle.setText("");            mPlayer.playUrl(Constant.DEFAULT_PLAY_URL,false);        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();    }    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    @Override    protected void onResume() {        super.onResume();        Window window = getWindow();        window.setStatusBarColor(Color.TRANSPARENT);    }    @Override    public void showLoading() {        mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);        mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);    }    @Override    public void hideLoading() {    }    @Override    public void showError(String error) {        if (currentPage == 1) {            meiPaiDatas.clear();            meiPaiAdapter.setFooterVisible(false);            meiPaiAdapter.notifyDataSetChanged();        }        SnackbarUtil.ShortSnackbar(mRvVideo,error,SnackbarUtil.WARNING).show();    }    @Override    public void setDatas(List<MeiPaiData> datas) {        meiPaiDatas.addAll(datas);        if(meiPaiDatas.size() < Constant.PAGE_SIZE){            meiPaiAdapter.setFooterVisible(false);        } else {            meiPaiAdapter.setFooterVisible(true);        }        meiPaiAdapter.notifyDataSetChanged();    }    @Override    public void update(Observable observable, Object data) {       if (data instanceof MeiPaiData) {            meiPaiData = (MeiPaiData)data;            mHandler.sendEmptyMessage(meiPaiData.getAction());        } else if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int action = bundle.getInt(Constant.ACTION_KEY);            if (action == Constant.Action.SHARE_MEIPAI) {                String imgUrl = ((Bundle) data).getString(Constant.INTENT_DATA_KEY);                Message msg = new Message();                msg.what = Constant.Action.SHARE_MEIPAI;                msg.obj = imgUrl;                mHandler.sendMessage(msg);            }        } else if (data instanceof Integer) {            int action = (int) data;            if (action == Constant.Action.PLAY_NEXT_MEIPAI_VIDEO) {                currentPlayPosition += 1;                if (currentPlayPosition >= meiPaiDatas.size() + 1) {                    currentPlayPosition = 0;                }                if (currentPlayPosition < meiPaiDatas.size() + 1) {                    MeiPaiData meiPaiData = meiPaiDatas.get(currentPlayPosition - 1);                    meiPaiData.setAction(Constant.Action.PLAY_MEIPAI_VIDEO);                    meiPaiData.setPosition(currentPlayPosition);                    DataObservable.getInstance().setData(meiPaiData);                }            }        }    }}