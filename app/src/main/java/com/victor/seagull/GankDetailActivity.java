package com.victor.seagull;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.renderscript.Allocation;import android.renderscript.RenderScript;import android.renderscript.ScriptIntrinsicBlur;import android.support.v4.view.ViewCompat;import android.support.v4.view.ViewPager;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.animation.DecelerateInterpolator;import android.widget.ImageView;import com.bumptech.glide.Glide;import com.bumptech.glide.request.animation.GlideAnimation;import com.bumptech.glide.request.target.SimpleTarget;import com.victor.adapter.GankDetailAdapter;import com.victor.model.data.GankInfo;import com.victor.model.data.Picture;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.util.BitmapUtil;import com.victor.util.Constant;import com.victor.util.DensityUtil;import com.victor.util.ImageBlur;import com.victor.util.Loger;import com.victor.util.SnackbarUtil;import com.victor.widget.InsetsAppBarLayout;import com.victor.widget.InsetsCoordinatorLayout;import java.util.ArrayList;import java.util.List;import java.util.Observable;public class GankDetailActivity extends BaseActivity implements View.OnClickListener,        ViewPager.OnPageChangeListener{    private String TAG = "GankDetailActivity";    private InsetsAppBarLayout mToolBarLayout;    private Toolbar toolbar;    private ViewPager mVpGank;    private GankDetailAdapter gankDetailAdapter;    private List<GankInfo> gankInfos = new ArrayList<>();    private int currentPage;    private boolean actionBarShown = true;    private HttpRequestHelper mHttpRequestHelper;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Msg.SAVE_PICTURE_SUCCESS:                    SnackbarUtil.ShortSnackbar(mVpGank,getString(R.string.save_picture_success)).show();                    break;                case Constant.Msg.SET_WALLPAPER_SUCCESS:                    SnackbarUtil.ShortSnackbar(mVpGank,getString(R.string.set_wallpaper_success)).show();                    break;                case Constant.Msg.SET_WALLPAPER_FAILED:                    SnackbarUtil.ShortSnackbar(mVpGank,getString(R.string.set_wallpaper_failed)).show();                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_gank_detail);        initialize();        initData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(this);        mToolBarLayout = (InsetsAppBarLayout) findViewById(R.id.appbar_layout);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        injectViewsAndSetUpToolbar();        mVpGank = (ViewPager) findViewById(R.id.vp_gank);        gankDetailAdapter = new GankDetailAdapter(this);        gankDetailAdapter.setDatas(gankInfos);        gankDetailAdapter.setOnImgClickListener(this);        mVpGank.setAdapter(gankDetailAdapter);        mVpGank.setOnPageChangeListener(this);    }    private void initData () {        Bundle bundle = getIntent().getExtras();        if (bundle != null) {            if (bundle.containsKey(Constant.INTENT_DATA_KEY)) {                List<GankInfo> tmpList = (List<GankInfo>) bundle.getSerializable(Constant.INTENT_DATA_KEY);                if (tmpList != null && tmpList.size() > 0) {                    gankInfos.clear();                    gankInfos.addAll(tmpList);                    gankDetailAdapter.notifyDataSetChanged();                }            }            if (bundle.containsKey(Constant.CURRENT_PAGE_KEY)) {                currentPage = bundle.getInt(Constant.CURRENT_PAGE_KEY);                mVpGank.setCurrentItem(currentPage);            }        }    }    protected void injectViewsAndSetUpToolbar() {        ViewCompat.setElevation(mToolBarLayout, DensityUtil.dip2px(this, 4.0F));    }    protected void showActionbar(boolean show, boolean animate) {        if (animate) {            autoShowOrHideActionBar(show);        } else {            if (show) {                getSupportActionBar().show();            } else {                getSupportActionBar().hide();            }        }    }    public void setToolbarAlpha(float alpha) {        mToolBarLayout.getBackground().setAlpha((int) (alpha * 255));    }    protected void autoShowOrHideActionBar(boolean show) {        if (show == actionBarShown) {            return;        }        actionBarShown = show;        onActionBarAutoShowOrHide(show);    }    protected void onActionBarAutoShowOrHide(boolean shown) {        View view = mToolBarLayout;        if (shown) {            view.animate()                    .translationY(0)                    .alpha(1)                    .setDuration(Constant.HEADER_HIDE_ANIM_DURATION)                    .setInterpolator(new DecelerateInterpolator());        } else {            view.animate()                    .translationY(-view.getBottom())                    .alpha(0)                    .setDuration(Constant.HEADER_HIDE_ANIM_DURATION)                    .setInterpolator(new DecelerateInterpolator());        }    }    private void blurImg(Bitmap image,View view) {        //透明度动画        Bitmap bitmap = doBlurJniBitMap(BitmapUtil.getBlurBitMap(image,view), 25, true);        if (bitmap == null) {            //获取背景图片失败  使用默认黑色背景 需要图片            return;        }        BitmapDrawable drawable = new BitmapDrawable(getResources(), bitmap);        view.setBackground(drawable);    }    public  Bitmap doBlurJniBitMap(Bitmap sentBitmap, int radius, boolean canReuseInBitmap) {        Bitmap bitmap;        try {            long startTime = System.currentTimeMillis();            if (canReuseInBitmap) {                bitmap = sentBitmap;            } else {                bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);            }            if (radius < 1) {                return (null);            }            // Jni bitmap calculate            ImageBlur.blurBitMap(bitmap, radius);            return (bitmap);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_gank_detail, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;            case R.id.action_share:                String url = gankInfos.get(currentPage).getUrl();                Intent intentshare = new Intent(Intent.ACTION_SEND);                intentshare.setType(Constant.SHARE_TYPE)                        .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share))                        .putExtra(Intent.EXTRA_TEXT,getString(R.string.share_beauty) + url);                Intent.createChooser(intentshare, getString(R.string.share));                startActivity(intentshare);                return true;            case R.id.action_save:                if (mHttpRequestHelper != null) {                    String imgUrl = gankInfos.get(currentPage).getUrl();                    Picture picture = new Picture();                    picture.setName(imgUrl.substring(imgUrl.lastIndexOf("/") + 1, imgUrl.length()));                    picture.setDir(Constant.dir);                    picture.setImgUrl(imgUrl);                    picture.setBitmap(gankDetailAdapter.getCurrentView());                    mHttpRequestHelper.sendRequestWithParms(Constant.Action.SAVE_PICTURE,picture);                }                return true;            case R.id.action_set_wallpaper:                Picture picture = new Picture();                picture.setBitmap(gankDetailAdapter.getCurrentView());                mHttpRequestHelper.sendRequestWithParms(Constant.Action.SET_WALLPAPER,picture);                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    public void onClick(View view) {        if (actionBarShown) {            showActionbar(false, true);        } else {            showActionbar(true, true);        }    }    @Override    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        ;    }    @Override    public void onPageSelected(int position) {        currentPage = position;    }    @Override    public void onPageScrollStateChanged(int state) {        if (state == ViewPager.SCROLL_STATE_IDLE) {            if (actionBarShown) {                showActionbar(false, true);            }        }    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int action = bundle.getInt(Constant.ACTION_KEY);            mHandler.sendEmptyMessage(action);        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();        if (mHttpRequestHelper != null) {            mHttpRequestHelper.onDestroy();        }    }}