package com.victor.seagull;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.graphics.Point;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.os.PersistableBundle;import android.support.design.widget.FloatingActionButton;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.MenuItem;import android.view.SurfaceView;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ImageView;import com.victor.adapter.SnapAdapter;import com.victor.model.data.ChannelData;import com.victor.model.data.ChannelUrl;import com.victor.model.data.LiveCategory;import com.victor.model.data.Channel;import com.victor.model.data.EpgData;import com.victor.model.data.EpgInfo;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.player.library.module.PlayHelper;import com.victor.player.library.module.Player;import com.victor.presenter.impl.ChannelPresenterImpl;import com.victor.seagull.view.ChannelView;import com.victor.util.Constant;import com.victor.util.EpgUtil;import com.victor.util.SharePreferencesUtil;import com.victor.widget.HeartBubbleView;import com.victor.widget.ColorMovingTextView;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import java.util.Observable;import butterknife.Bind;import butterknife.ButterKnife;import butterknife.OnClick;public class LiveEpgActivity extends BaseActivity implements AdapterView.OnItemClickListener,ChannelView <ChannelData> {    private String TAG = "LiveEpgActivity";    private View view;    @Bind(R.id.toolbar)    Toolbar toolbar;    @Bind(R.id.rv_channels)    RecyclerView mRvChannels;    @Bind(R.id.sv_live)    SurfaceView svLive;    @Bind(R.id.fab_fullscreen)    FloatingActionButton mFabFullScreen;    @Bind(R.id.mtv_channel)    ColorMovingTextView mMtvChannel;    @Bind(R.id.iv_maintenance)    ImageView mIvMaintenance;    //    private StaggeredGridLayoutManager staggeredGridLayoutManager;    private LinearLayoutManager linearLayoutManager;    private SnapAdapter snapAdapter;    //    private ChannelAdapter channelAdapter;    private List<Channel> channelList = new ArrayList<>();    private List<LiveCategory> categoryList = new ArrayList<>();    private HttpRequestHelper mHttpRequestHelper;    private PlayHelper mPlayHelper;    private int currentPosition = -1;//当前播放界面位置    private int livePlayPosition;//当前播放直播源地址位置    private boolean isFullscreen;//是否全屏    private ChannelPresenterImpl channelPresenter;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Player.PLAYER_PREPARING:                    mIvMaintenance.setVisibility(View.GONE);                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_PREPARED:                    mIvMaintenance.setVisibility(View.GONE);                    if (isFullscreen) {                        view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);                    }                    break;                case Player.PLAYER_ERROR:                    livePlayPosition++;                    if (channelList != null && channelList.size() > 0) {                        if (currentPosition < channelList.size()) {                            if (currentPosition == -1) {                                currentPosition = 0;                            }                            List<ChannelUrl> playUrls = channelList.get(currentPosition).getPlay_urls();                            if (livePlayPosition >= playUrls.size()) {                                livePlayPosition = 0;                                mIvMaintenance.setVisibility(View.VISIBLE);                                return;                            }                            play(false);                        }                    }                    break;                case Player.PLAYER_BUFFERING_START:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_BUFFERING_END:                    mIvMaintenance.setVisibility(View.GONE);                    break;                case Player.PLAYER_PROGRESS_INFO:                    break;                case Player.PLAYER_COMPLETE:                    break;                case Constant.Msg.SHOW_LIVE_EPG:                    String lastPlayName = SharePreferencesUtil.getString(getApplicationContext(),Constant.CURRENT_PLAY_NAME,getString(R.string.default_channel));                    StringBuffer sbTip = new StringBuffer(lastPlayName);                    if (currentPosition != -1) {                        sbTip.setLength(0);                        sbTip.append(channelList.get(currentPosition).getChannel_name());                    }                    List<EpgInfo> epgs = (List<EpgInfo>) msg.obj;                    if (epgs != null) {                        if (epgs.size() == 1) {                            sbTip.append(getString(R.string.playing) + epgs.get(0).epg + getString(R.string.will_play) + getString(R.string.no_channel));                        } else if (epgs.size() == 2) {                            sbTip.append(getString(R.string.playing) + epgs.get(0).epg + getString(R.string.will_play) + epgs.get(1).epg);                        }                    }                    mMtvChannel.setText(sbTip.toString());                    break;                case Constant.Msg.DRAW_HEART_BUBBLE:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {                        if (mPlayHelper.getPlayer().isPlaying()) {                            return;                        }                    }                    drawHeartBubble();                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        view = getLayoutInflater().from(this).inflate(R.layout.activity_live_epg,null);        setContentView(view);        ButterKnife.bind(this);        initialize();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        linearLayoutManager = new LinearLayoutManager(this);//这里用线性显示 类似于listview        mRvChannels.setLayoutManager(linearLayoutManager);        snapAdapter = new SnapAdapter(this,this);        snapAdapter.setDatas(categoryList);        mRvChannels.setAdapter(snapAdapter);        mHttpRequestHelper = new HttpRequestHelper(this);        channelPresenter = new ChannelPresenterImpl(this);        sendChannelRequest();        mPlayHelper = new PlayHelper(svLive,mHandler);        play(true);    }    private void initData (List<LiveCategory> categories) {        if (categories != null && categories.size() > 0) {            categoryList.clear();            categoryList.addAll(categories);            snapAdapter.notifyDataSetChanged();        }    }    private void scaleScreen () {        if (isFullscreen) {            view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        } else {            view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);        }        isFullscreen = !isFullscreen;    }    /**     * 心形气泡动感效果     */    private void drawHeartBubble () {        int position[] = new int[2];        HeartBubbleView heartBubbleView = new HeartBubbleView(this);        mFabFullScreen.getLocationInWindow(position);        heartBubbleView.setStartPosition(new Point(position[0], position[1]));        ViewGroup rootView = (ViewGroup) this.getWindow().getDecorView();        rootView.addView(heartBubbleView);        int endPosition[] = new int[2];        mMtvChannel.getLocationInWindow(endPosition);        heartBubbleView.setEndPosition(new Point(endPosition[0], endPosition[1]));// y 为0 到顶部，x为随机生成        heartBubbleView.startBeizerAnimation();    }    private void play (boolean isPlayLast) {        if (isPlayLast) {//首次播放默认频道或最后一次播放的频道            String lastPlayUrl = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_URL,Constant.DEFAULT_PLAY_URL);            String lastPlayEpg = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_EPG,Constant.DEFAULT_EPG_URL);            mPlayHelper.play(lastPlayUrl);            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_LIVE_EPG,lastPlayEpg);            return;        }        SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_NAME,channelList.get(currentPosition).getChannel_name());        if (currentPosition >= channelList.get(currentPosition).getPlay_urls().size()) {            livePlayPosition = 0;        }        String url = channelList.get(currentPosition).getPlay_urls().get(livePlayPosition).getPlay_url();        SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_URL,url);        mPlayHelper.play(url);        String epg = channelList.get(currentPosition).getEpg();        if (!TextUtils.isEmpty(epg)) {            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_LIVE_EPG,epg);            SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_EPG,epg);        }    }    private void sendChannelRequest () {        mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);        mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);        String url = Constant.CHANNEL_URL_NEW;        channelPresenter.sendRequest(url,null,null);    }    @Override    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {        currentPosition = position;        if (id < categoryList.size()) {            if (position <categoryList.get((int) id).getChannels().size()) {                channelList = categoryList.get((int) id).getChannels();                play(false);            }        }    }    @OnClick({R.id.fab_fullscreen})    public void onClick(View view) {        switch (view.getId()) {            case R.id.fab_fullscreen:                if (categoryList == null || categoryList.size() == 0) {                    sendChannelRequest();                    return;                }                Intent intent = new Intent(LiveEpgActivity.this,LiveActivity.class);                intent.putExtra(Constant.CHANNEL_DATA_KEY, (Serializable) categoryList);//                Bundle bundle = new Bundle();//                bundle.putString(Constant.CHANNEL_DATA_KEY,"hello victor i am seagul tv!");//                bundle.putSerializable(Constant.CHANNEL_DATA_KEY, (Serializable) categoryList);                startActivity(intent);                break;        }    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof EpgData) {            EpgData epgData = (EpgData) data;            List<EpgInfo> epgs = EpgUtil.getEpgByTime(epgData);            if (epgData.status == Constant.Msg.REQUEST_SUCCESS) {                if (epgs != null && epgs.size() > 0) {                    Message msg = new Message();                    msg.what = Constant.Msg.SHOW_LIVE_EPG;                    msg.obj = epgs;                    mHandler.sendMessage(msg);                }            }        }    }    @Override    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {        super.onSaveInstanceState(outState, outPersistentState);        Log.e(TAG, "onSaveInstanceState()......");    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        Log.e(TAG, "onConfigurationChanged()......");    }    @Override    protected void onRestoreInstanceState(Bundle savedInstanceState) {        super.onRestoreInstanceState(savedInstanceState);        Log.e(TAG, "onRestoreInstanceState()......");    }    @Override    protected void onPause() {        super.onPause();        if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {            mPlayHelper.getPlayer().pause();        }    }    @Override    protected void onResume() {        super.onResume();        if (mPlayHelper != null && mPlayHelper.getPlayer() != null) {            mPlayHelper.getPlayer().resume();        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        if(mPlayHelper != null){            mPlayHelper.onDestroy();        }        if (channelPresenter != null) {            channelPresenter.detachView();        }        super.onDestroy();    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    public void OnChannel(ChannelData data, String msg) {        initData(data.getCategorys());    }}