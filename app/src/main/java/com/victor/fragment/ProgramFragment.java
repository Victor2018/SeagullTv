package com.victor.fragment;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v4.app.ActivityOptionsCompat;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.View;import android.widget.AdapterView;import android.widget.Toast;import com.victor.adapter.ProgramAdapter;import com.victor.adapter.SlideInLeftAnimatorAdapter;import com.victor.fragment.view.ProgramView;import com.victor.model.data.ProgramData;import com.victor.model.data.ProgramInfo;import com.victor.presenter.impl.ProgramPresenterImpl;import com.victor.seagull.FunnyActivity;import com.victor.seagull.LiveEpgActivity;import com.victor.seagull.MainActivity;import com.victor.seagull.ProgramDetailActivity;import com.victor.seagull.R;import com.victor.util.Constant;import com.victor.util.SharePreferencesUtil;import com.victor.util.SnackbarUtil;import com.victor.widget.InsetsSwipeRefreshLayout;import java.util.ArrayList;import java.util.List;import butterknife.Bind;public class ProgramFragment extends BaseFragment implements ProgramView<ProgramData>,        AdapterView.OnItemClickListener,SwipeRefreshLayout.OnRefreshListener {    private String TAG = "ProgramFragment";    @Bind(R.id.srl_fresh)    InsetsSwipeRefreshLayout swipeRefreshLayout;    @Bind(R.id.rv_program)    RecyclerView mRvProgram;    private Context mContext;    private List<ProgramInfo> programInfos = new ArrayList<>();    private GridLayoutManager gridLayoutManager;    private ProgramAdapter programAdapter;    private ProgramPresenterImpl programPresenter;    private float actionbarScrollPoint;    public float summaryScrolled;    private float maxScroll;    @Override    protected int getLayoutResource() {        return R.layout.frag_program;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        initialize();        sendProgramRequest();    }    private void initialize () {        mContext = getActivity();        programPresenter = new ProgramPresenterImpl(this);        //设置 进度条的颜色变化，最多可以设置4种颜色        swipeRefreshLayout.setColorSchemeResources(android.R.color.holo_purple, android.R.color.holo_blue_bright,                android.R.color.holo_orange_light, android.R.color.holo_red_light);        swipeRefreshLayout.setOnRefreshListener(this);        mRvProgram.setHasFixedSize(true);        gridLayoutManager = new GridLayoutManager(mContext,2);//这里用线性宫格显示 类似于瀑布流        mRvProgram.setLayoutManager(gridLayoutManager);        programAdapter = new ProgramAdapter(mContext,this);        programAdapter.setProgramDatas(programInfos);        programAdapter.setHeaderVisible(false);        programAdapter.setFooterVisible(false);//        mRvProgram.setAdapter(programAdapter);//        ScaleInAnimatorAdapter animatorAdapter = new ScaleInAnimatorAdapter(programAdapter, mRvProgram);//        AlphaAnimatorAdapter animatorAdapter = new AlphaAnimatorAdapter(programAdapter, mRvProgram);//        SlideInBottomAnimatorAdapter animatorAdapter = new SlideInBottomAnimatorAdapter(programAdapter, mRvProgram);        SlideInLeftAnimatorAdapter animatorAdapter = new SlideInLeftAnimatorAdapter(programAdapter, mRvProgram);//        SlideInRightAnimatorAdapter animatorAdapter = new SlideInRightAnimatorAdapter(programAdapter, mRvProgram);//        SwingBottomInAnimationAdapter animatorAdapter = new SwingBottomInAnimationAdapter(programAdapter, mRvProgram);        mRvProgram.setAdapter(animatorAdapter);        gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {            @Override            public int getSpanSize(int position) {                if (position == 0) {                    return 2;                } else if (position % 5 == 3) {                    return 2;                } else {                    return 1;                }            }        });        mRvProgram.setOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                int lastVisibleItemPosition = gridLayoutManager.findLastVisibleItemPosition();                if (dy > actionbarScrollPoint) {                    ((MainActivity)getActivity()).showActionbar(false, true);                }                if (dy < actionbarScrollPoint * (-1)) {                    ((MainActivity)getActivity()).showActionbar(true, true);                }                summaryScrolled += dy;                ((MainActivity)getActivity()).getBubblesIv().setTranslationY(-0.5f * summaryScrolled);                float alpha = summaryScrolled / maxScroll;                alpha = Math.min(1.0f, alpha);                ((MainActivity)getActivity()).setToolbarAlpha(alpha);                //change background color on scroll                int color = (int) Math.max(Constant.BG_COLOR_MIN, Constant.BG_COLOR_MAX - summaryScrolled * 0.05);                ((MainActivity)getActivity()).getMainParent().setBackgroundColor(Color.argb(255, color, color, color));            }        });    }    private void sendProgramRequest () {        String url = Constant.CATEGORY_URL_NEW;        programPresenter.sendRequest(url,null,null);    }    private void showCategory (List<ProgramInfo> datas) {        if (datas != null && datas.size() > 0) {            programInfos.clear();            programInfos.addAll(datas);            programAdapter.notifyDataSetChanged();        }    }    @Override    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {        if (programInfos == null || programInfos.size() == 0) {            if (mContext != null) {                Toast.makeText(mContext,"正在初始化，请稍候...",Toast.LENGTH_SHORT).show();            }            return;        }        if (position < programInfos.size()) {            SharePreferencesUtil.putString(mContext,Constant.HEAD_IMG_URL,programInfos.get(position).getImg());            SharePreferencesUtil.putString(mContext,Constant.CURRENT_MEI_PAI_URL,programInfos.get(position).getUrl());        }        Intent intent = new Intent(getActivity(), LiveEpgActivity.class);        int action = programInfos.get(position).getAction();        switch (action) {            case Constant.Action.LIVE:                intent = new Intent(getActivity(), LiveEpgActivity.class);                break;            case Constant.Action.HOT:                intent = new Intent(getActivity(),ProgramDetailActivity.class);                break;            case Constant.Action.DUANZI:                intent = new Intent(getActivity(),FunnyActivity.class);                break;            case Constant.Action.FUNNY:            case Constant.Action.DELICIOUS:            case Constant.Action.EAT_SHOW:            case Constant.Action.MUSIC:            case Constant.Action.DANCE:            case Constant.Action.STAR:            case Constant.Action.GODDESS:            case Constant.Action.PET:            case Constant.Action.MANUAL:            case Constant.Action.WEAR_SHOW:                intent = new Intent(getActivity(),ProgramDetailActivity.class);                break;        }        ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(getActivity(),                view.findViewById(R.id.iv_img), getString(R.string.transition_album_img));        ActivityCompat.startActivity(getActivity(), intent, options.toBundle());    }    @Override    public void onRefresh() {        sendProgramRequest();    }    @Override    public void OnProgram(ProgramData data, String msg) {        if (!isAdded()) return;        if (swipeRefreshLayout != null) {            swipeRefreshLayout.setRefreshing(false);        }        if (data == null) {            SnackbarUtil.ShortSnackbar(mRvProgram,msg,SnackbarUtil.WARNING).show();            return;        }        if (data.getCategorys() == null || data.getCategorys().size() == 0) {            SnackbarUtil.ShortSnackbar(mRvProgram,msg,SnackbarUtil.WARNING).show();            return;        }        showCategory(data.getCategorys());    }    @Override    public void onDestroy() {        super.onDestroy();        if (programPresenter != null) {            programPresenter.detachView();        }    }}