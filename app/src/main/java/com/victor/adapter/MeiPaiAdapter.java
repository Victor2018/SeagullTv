package com.victor.adapter;import android.content.Context;import android.graphics.Color;import android.os.Bundle;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import com.bumptech.glide.Glide;import com.mikepenz.foundation_icons_typeface_library.FoundationIcons;import com.mikepenz.iconics.IconicsDrawable;import com.victor.model.data.Media;import com.victor.model.data.MeiPaiData;import com.victor.model.data.MeiPaiUser;import com.victor.module.DataObservable;import com.victor.seagull.R;import com.victor.util.Constant;import com.victor.widget.ColorTextView;import java.util.List;import jp.wasabeef.glide.transformations.CropCircleTransformation;/** * Created by victor on 2016/6/1. */public class MeiPaiAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>{    private String TAG = "MeiPaiAdapter";    private final LayoutInflater mLayoutInflater;    private final Context mContext;    private static List<MeiPaiData> datas;    protected int mHeaderCount = 1;//头部View个数    protected int mBottomCount = 1;//底部View个数    private int ITEM_TYPE_HEADER = 0;    private int ITEM_TYPE_CONTENT = 1;    private int ITEM_TYPE_BOTTOM = 2;    private boolean isHeaderVisible = true;    private boolean isFooterVisible = true;    public static List<MeiPaiData> getDatas() {        return datas;    }    public static void setDatas(List<MeiPaiData> datas) {        MeiPaiAdapter.datas = datas;    }    public MeiPaiAdapter(Context context) {        mContext = context;        mLayoutInflater = LayoutInflater.from(context);    }    public void setHeaderVisible (boolean visible) {        isHeaderVisible = visible;        mHeaderCount = 1;        if (!isHeaderVisible) {            mHeaderCount = 0;        }        notifyDataSetChanged();    }    public void setFooterVisible (boolean visible) {        isFooterVisible = visible;        mBottomCount = 1;        if (!isFooterVisible) {            mBottomCount = 0;        }        notifyDataSetChanged();    }    public void add (MeiPaiData data) {        datas.add(data);        notifyItemInserted(0);    }    public void addAll (List<MeiPaiData> datas) {//        meiPaiContentDatas.addAll(datas);//        notifyItemRangeInserted(0, datas.size());        for (MeiPaiData data : datas) {            add(data);        }    }    public void remove (int position) {        datas.remove(datas);        notifyItemRemoved(position);    }    public void clear () {//        notifyItemRangeRemoved(0,meiPaiContentDatas.size());//        meiPaiContentDatas.clear();        for (int i=0;i<datas.size();i++) {            remove(i);        }    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == ITEM_TYPE_HEADER) {            return onCreateHeaderView(parent);        } else if (viewType == ITEM_TYPE_CONTENT) {            return onCreateContentView(parent);        } else if (viewType == ITEM_TYPE_BOTTOM) {            return onCreateBottomView(parent);        }        return null;    }    public RecyclerView.ViewHolder onCreateHeaderView (ViewGroup parent){        return new HeaderViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_header, parent, false));    }    public RecyclerView.ViewHolder onCreateContentView (ViewGroup parent){        return new ContentViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_meipai_content, parent, false));    }    public RecyclerView.ViewHolder onCreateBottomView (ViewGroup parent) {        return new BottomViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_foot, parent, false));    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof HeaderViewHolder) {            ((HeaderViewHolder) holder).mTvTitle.setVisibility(View.GONE);        } else if (holder instanceof ContentViewHolder) {            final ImageView mIvImg = ((ContentViewHolder) holder).mIvImg;            final ImageView mIvIconImg = ((ContentViewHolder) holder).mIvIcon;            ColorTextView mCtvTitle = ((ContentViewHolder) holder).mCtvTitle;            ColorTextView mCtvLikeCount = ((ContentViewHolder) holder).mCtvLikeCount;            ColorTextView mCtvCommentsCount = ((ContentViewHolder) holder).mCtvCommentsCount;            ColorTextView mCtvRepostsCount = ((ContentViewHolder) holder).mCtvRepostsCount;            int limit = 30;            if (position < datas.size()) {                MeiPaiData data = datas.get(position);                if (data != null) {                    Media media = data.getMedia();                    if (media != null) {                        mCtvLikeCount.setText(media.getLikes_count() + "");                        mCtvCommentsCount.setText(media.getComments_count() + "");                        mCtvRepostsCount.setText(media.getReposts_count() + "");                        MeiPaiUser user = media.getUser();                        if (user != null) {                            String iconUrl = media.getUser().getAvatar();                            Glide.with(mContext).load(iconUrl).centerCrop().error(R.mipmap.default_img)                                    .placeholder(new IconicsDrawable(mContext)                                            .icon(FoundationIcons.Icon.fou_photo)                                            .color(Color.GRAY)                                            .backgroundColor(Color.WHITE)                                            .roundedCornersDp(40)                                            .paddingDp(15)                                            .sizeDp(75))                                    .bitmapTransform(new CropCircleTransformation(mContext))                                    .dontAnimate()                                    .into(mIvIconImg);//                    Picasso.with(mContext).load(imgUrl).fit().centerCrop().into(mIvImg);                        }                    }                    String desc = data.getRecommend_caption().length() > limit ? data.getRecommend_caption().substring(0, limit) + "..." : data.getRecommend_caption();                    mCtvTitle.setText(desc);                    String imgUrl = datas.get(position).getRecommend_cover_pic().replace("!thumb320","");                    Glide.with(mContext).load(imgUrl).centerCrop().placeholder(R.mipmap.default_img).error(R.mipmap.default_img).into(mIvImg);                }            }        } else if (holder instanceof BottomViewHolder) {//            ((BottomViewHolder) holder).mTvTitle.setVisibility(View.GONE);        }    }    @Override    public int getItemViewType(int position) {        int ITEM_TYPE = ITEM_TYPE_CONTENT;        int dataItemCount = getContentItemCount();        if (mHeaderCount != 0 && position < mHeaderCount) {//头部View            ITEM_TYPE = ITEM_TYPE_HEADER;        } else if (mBottomCount != 0 && position >= (mHeaderCount + dataItemCount)) {//底部View            ITEM_TYPE = ITEM_TYPE_BOTTOM;        }        return ITEM_TYPE;    }    public boolean isHeaderView(int position) {        return mHeaderCount != 0 && position < mHeaderCount;    }    public boolean isBottomView(int position) {        return mBottomCount != 0 && position >= (mHeaderCount + getContentItemCount());    }    public int getContentItemCount() {        return datas == null ? 0 : datas.size();    }    @Override    public int getItemCount() {        return mHeaderCount + getContentItemCount() + mBottomCount;    }    public static class ContentViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,View.OnLongClickListener {        ImageView mIvImg;        ImageView mIvIcon;        ColorTextView mCtvTitle,mCtvLikeCount,mCtvCommentsCount,mCtvRepostsCount;        ContentViewHolder(View view) {            super(view);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mIvIcon = (ImageView) itemView.findViewById(R.id.iv_meipai_frag_icon);            mCtvTitle = (ColorTextView) view.findViewById(R.id.ctv_title);            mCtvLikeCount = (ColorTextView) view.findViewById(R.id.ctv_like_count);            mCtvCommentsCount = (ColorTextView) view.findViewById(R.id.ctv_comments_count);            mCtvRepostsCount = (ColorTextView) view.findViewById(R.id.ctv_reposts_count);            view.setOnClickListener(this);            view.setOnLongClickListener(this);        }        @Override        public void onClick(View v) {            if (getAdapterPosition() < datas.size()) {                MeiPaiData meiPaiContentData = datas.get(getAdapterPosition());                meiPaiContentData.setAction(Constant.Action.PLAY_MEIPAI_VIDEO);                meiPaiContentData.setPosition(getAdapterPosition());                DataObservable.getInstance().setData(meiPaiContentData);            }        }        @Override        public boolean onLongClick(View v) {            if (getAdapterPosition() < datas.size()) {                String imgUrl = datas.get(getAdapterPosition()).getMedia().getVideo();                Bundle bundle = new Bundle();                bundle.putInt(Constant.ACTION_KEY,Constant.Action.SHARE_MEIPAI);                bundle.putString(Constant.INTENT_DATA_KEY,imgUrl);                DataObservable.getInstance().setData(bundle);            }            return false;        }    }    public static class HeaderViewHolder extends RecyclerView.ViewHolder {        ImageView mIvImg;        TextView mTvTitle;        public HeaderViewHolder(View itemView) {            super(itemView);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mTvTitle = (TextView) itemView.findViewById(R.id.tv_title);        }    }    public static class BottomViewHolder extends RecyclerView.ViewHolder {        ImageView mIvImg;        TextView mTvTitle;        public BottomViewHolder(View itemView) {            super(itemView);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mTvTitle = (TextView) itemView.findViewById(R.id.tv_title);        }    }}