package com.victor.adapter;import android.content.Context;import android.database.DataSetObserver;import android.graphics.Color;import android.graphics.Typeface;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import com.victor.data.ScaleData;import com.victor.interfaces.WheelViewAdapter;import java.util.LinkedList;import java.util.List;/** * Abstract wheel adapter provides common functionality for adapters. */public class ScreenScaleAdapter implements WheelViewAdapter {    protected Context context;    protected LayoutInflater inflater;    private List<ScaleData> datas;    public void setDatas(List<ScaleData> datas) {        this.datas = datas;    }    public List<ScaleData> getDatas() {        return datas;    }    // Observers    private List<DataSetObserver> datasetObservers;    /**     * Constructor     *     * @param context          the current context     */    public ScreenScaleAdapter(Context context) {        this.context = context;        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);    }    protected  CharSequence getItemText(int index) {        if (index >= 0 && index < getItemsCount()) {            return datas.get(index).scaleName;        }        return null;    }    @Override    public View getItem(int index, View convertView, ViewGroup parent) {        if (index >= 0 && index < getItemsCount()) {            if (convertView == null) {                convertView = getView();            }            TextView textView = getTextView(convertView, 0);            if (textView != null) {                CharSequence text = getItemText(index);                if (text == null) {                    text = "";                }                textView.setText(text);                configureTextView(textView);            }            return convertView;        }        return null;    }    @Override    public View getEmptyItem(View convertView, ViewGroup parent) {        if (convertView == null) {            convertView = getView();        }        return convertView;    }    @Override    public void registerDataSetObserver(DataSetObserver observer) {        if (datasetObservers == null) {            datasetObservers = new LinkedList<DataSetObserver>();        }        datasetObservers.add(observer);    }    @Override    public void unregisterDataSetObserver(DataSetObserver observer) {        if (datasetObservers != null) {            datasetObservers.remove(observer);        }    }    /**     * Notifies observers about data changing     */    public void notifyDataChangedEvent() {        if (datasetObservers != null) {            for (DataSetObserver observer : datasetObservers) {                observer.onChanged();            }        }    }    /**     * Notifies observers about invalidating data     */    public void notifyDataInvalidatedEvent() {        if (datasetObservers != null) {            for (DataSetObserver observer : datasetObservers) {                observer.onInvalidated();            }        }    }    /**     * Configures text view. Is called for the TEXT_VIEW_ITEM_RESOURCE views.     *     * @param view the text view to be configured     */    protected void configureTextView(TextView view) {        view.setTextColor(Color.CYAN);        view.setGravity(Gravity.CENTER);        view.setPadding(0, 5, 0, 5);        view.setTextSize(18);        view.setLines(1);        view.setTypeface(Typeface.SANS_SERIF, Typeface.BOLD);    }    /**     * Loads a text view from view     *     * @param view         the text view or layout containing it     * @param textResource the text resource Id in layout     * @return the loaded text view     */    private TextView getTextView(View view, int textResource) {        TextView text = null;        try {            if (textResource == 0 && view instanceof TextView) {                text = (TextView) view;            } else if (textResource != 0) {                text = (TextView) view.findViewById(textResource);            }        } catch (ClassCastException e) {            Log.e("AbstractWheelAdapter", "You must supply a resource ID for a TextView");            throw new IllegalStateException(                    "AbstractWheelAdapter requires the resource ID to be a TextView", e);        }        return text;    }    private View getView() {        return new TextView(context);    }    public int getItemsCount() {        return datas == null ? 0 : datas.size();    }}