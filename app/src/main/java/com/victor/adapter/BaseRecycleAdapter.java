package com.victor.adapter;import android.content.Context;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import com.victor.seagull.R;import com.victor.seagull.holder.BottomViewHolder;import com.victor.seagull.holder.HeaderViewHolder;import java.util.ArrayList;import java.util.List;/** * Created by victor on 2016/6/1. */public abstract class BaseRecycleAdapter<T,VH extends RecyclerView.ViewHolder> extends RecyclerView.Adapter<RecyclerView.ViewHolder>{    private String TAG = "BaseRecycleAdapter";    public static final int LOADING = 0x0001;//正在加载    public static final int LOADING_COMPLETE = 0x0002;//加载完毕    public static final int LOADING_END = 0x0003;    public final LayoutInflater mLayoutInflater;    public AdapterView.OnItemClickListener mOnItemClickListener;    public final Context mContext;    public List<T> datas = new ArrayList<>();    protected int mHeaderCount = 1;//头部View个数    protected int mBottomCount = 1;//底部View个数    public int ITEM_TYPE_HEADER = 0;    public int ITEM_TYPE_CONTENT = 1;    public int ITEM_TYPE_BOTTOM = 2;    private int loadState = LOADING_COMPLETE;//上拉加载状态    private boolean isHeaderVisible = true;    private boolean isFooterVisible = true;    public abstract VH onCreateHeadVHolder (ViewGroup parent, int viewType);    public abstract void onBindHeadVHolder(VH viewHolder, T data, int position);    public abstract VH onCreateContentVHolder (ViewGroup parent, int viewType);    public abstract void onBindContentVHolder(VH viewHolder, T data, int position);    public BaseRecycleAdapter(Context context, AdapterView.OnItemClickListener listener) {        mContext = context;        mOnItemClickListener = listener;        mLayoutInflater = LayoutInflater.from(context);        this.datas = datas;    }    public void setHeaderVisible (boolean visible) {        isHeaderVisible = visible;        mHeaderCount = 1;        if (!isHeaderVisible) {            mHeaderCount = 0;        }        notifyDataSetChanged();    }    public void setFooterVisible (boolean visible) {        isFooterVisible = visible;        mBottomCount = 1;        if (!isFooterVisible) {            mBottomCount = 0;        }        notifyDataSetChanged();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == ITEM_TYPE_HEADER) {            return onCreateHeadVHolder(parent,viewType);        } else            if (viewType == ITEM_TYPE_CONTENT) {            return onCreateContentVHolder(parent,viewType);        } else if (viewType == ITEM_TYPE_BOTTOM) {            return new BottomViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_foot, parent, false));        }        return null;    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        final T item = getItem(position);        if (holder instanceof HeaderViewHolder) {            onBindHeadVHolder((VH) holder, item, position);        } else if (holder instanceof BottomViewHolder) {            setFooterViewState((BottomViewHolder) holder);        }  else {            onBindContentVHolder((VH) holder, item, position);        }    }    @Override    public int getItemViewType(int position) {        int ITEM_TYPE = ITEM_TYPE_CONTENT;        int dataItemCount = getContentItemCount();        if (mHeaderCount != 0 && position < mHeaderCount) {//头部View            ITEM_TYPE = ITEM_TYPE_HEADER;        } else if (mBottomCount != 0 && position >= (mHeaderCount + dataItemCount)) {//底部View            ITEM_TYPE = ITEM_TYPE_BOTTOM;        }        return ITEM_TYPE;    }    public boolean isHeaderView(int position) {        return mHeaderCount != 0 && position < mHeaderCount;    }    public boolean isBottomView(int position) {        return mBottomCount != 0 && position >= (mHeaderCount + getContentItemCount());    }    public int getContentItemCount() {        return datas == null ? 0 : datas.size();    }    @Override    public int getItemCount() {        return mHeaderCount + getContentItemCount() + mBottomCount;    }    private void setFooterViewState (BottomViewHolder bottomViewHolder) {        switch (loadState) {            case LOADING:                bottomViewHolder.progressBar.setVisibility(View.VISIBLE);                bottomViewHolder.mTvTitle.setVisibility(View.VISIBLE);                bottomViewHolder.mLayoutEnd.setVisibility(View.GONE);                break;            case LOADING_COMPLETE:                bottomViewHolder.progressBar.setVisibility(View.GONE);                bottomViewHolder.mTvTitle.setVisibility(View.GONE);                bottomViewHolder.mLayoutEnd.setVisibility(View.GONE);                break;            case LOADING_END:                bottomViewHolder.progressBar.setVisibility(View.GONE);                bottomViewHolder.mTvTitle.setVisibility(View.GONE);                bottomViewHolder.mLayoutEnd.setVisibility(View.VISIBLE);                break;        }    }    /**     * 设置上拉加载状态     *     * @param loadState 0.正在加载 1.加载完成 2.加载到底     */    public void setLoadState(int loadState) {        this.loadState = loadState;        notifyDataSetChanged();    }    /**     * 获取元素     *     * @param position     * @return     */    public T getItem(int position) {        //防止越界        final int index = (position >= 0 && position < datas.size()) ? position : 0;        if (datas == null || datas.size() == 0) {            return null;        }        return datas.get(index);    }    /**     * 添加元素     *     * @param item     */    public void add(T item) {        if (item != null) {            datas.add(item);        }    }    /**     * 添加元素     *     * @param item     */    public void add(int index, T item) {        if (item != null) {            datas.add(index, item);        }    }    public void add(List<T> items) {        if (items != null) {            datas.addAll(items);        }    }    /**     * 重置元素     *     * @param items     */    public void setDatas(List<T> items) {        datas.clear();        add(items);    }    /**     * 移除     *     * @param index     */    public void removeItem(int index) {        if (index >= 0 && index < datas.size()) {            datas.remove(index);        }    }    public List<T> getDatas() {        return datas;    }    public void clear() {        datas.clear();    }}