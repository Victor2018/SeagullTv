package com.victor.util;import android.annotation.TargetApi;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Build;import android.util.Log;import org.json.JSONObject;import java.io.ByteArrayOutputStream;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.ProtocolException;import java.net.SocketTimeoutException;import java.net.URL;import java.nio.charset.StandardCharsets;import javax.net.ssl.HttpsURLConnection;/** * Created by victor on 2016/1/21. */public class HttpUtil {    private static String TAG = "HttpUtil";    private static int CONNECT_TIME_OUT = 10000;    private static int READ_TIME_OUT = 15000;    private static String USER_AGENT = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63";    private static String ENCODE = "utf-8";    @TargetApi(Build.VERSION_CODES.KITKAT)    public static String HttpPostRequest(String requestUrl, JSONObject parms){        String result = "";        try {            URL url = new URL(requestUrl);            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();            conn.setConnectTimeout(CONNECT_TIME_OUT);            conn.setReadTimeout(READ_TIME_OUT);            conn.setDoInput(true);            conn.setDoOutput(true);            //add reuqest header            conn.setRequestMethod("POST");            conn.setRequestProperty("User-Agent", USER_AGENT);            conn.setRequestProperty("Accept-Language", "en-US,en;q=0.5");            conn.setRequestProperty("Accept-Charset", ENCODE);            conn.setRequestProperty("Content-type", "application/json");            if (parms != null) {                DataOutputStream dos = new DataOutputStream(conn.getOutputStream());                dos.write(parms.toString().getBytes(StandardCharsets.UTF_8));                dos.flush();                dos.close();            }            int responseCode = conn.getResponseCode();            System.out.println("\nSending 'POST' request to URL : " + requestUrl);            System.out.println("Post parameters : " + parms.toString());            System.out.println("Response Code : " + responseCode);            InputStream is = conn.getInputStream();            ByteArrayOutputStream bos = new ByteArrayOutputStream();            byte[] buffer = new byte[1024];            int size = is.read(buffer);            while (size != -1) {                bos.write(buffer, 0, size);                size = is.read(buffer);            }            result = new String(bos.toByteArray(), ENCODE);            is.close();            bos.close();        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        } catch (ProtocolException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return result;    }    public static String HttpGetRequest(final String requestUrl) throws SocketTimeoutException{        String result = "";        try {            URL url = new URL(requestUrl);            HttpURLConnection conn = (HttpURLConnection) url.openConnection();            conn.setConnectTimeout(CONNECT_TIME_OUT);            conn.setReadTimeout(READ_TIME_OUT);            // optional default is GET            conn.setRequestMethod("GET");            //add request header            conn.setRequestProperty("User-Agent", USER_AGENT);            int responseCode = conn.getResponseCode();            Log.e(TAG, "HttpGetRequest-responseCode=" + responseCode);            InputStream is = conn.getInputStream();            ByteArrayOutputStream bos = new ByteArrayOutputStream();            byte[] buffer = new byte[1024];            int size = is.read(buffer);            while (size != -1) {                bos.write(buffer, 0, size);                size = is.read(buffer);            }            result = new String(bos.toByteArray(), ENCODE);            is.close();            bos.close();        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return result;    }    /**     * 检测网络是否可用     * @param context     * @return     */    public static boolean isNetEnable(Context context) {        ConnectivityManager connManager = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo networkinfo = connManager.getActiveNetworkInfo();        if (networkinfo == null || !networkinfo.isAvailable()) {            return false;        }        return true;    }}