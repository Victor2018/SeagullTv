package com.victor.util;import android.animation.Animator;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Bitmap;import android.graphics.drawable.BitmapDrawable;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.ViewGroup;import com.victor.data.Theme;import com.victor.seagull.R;/** * Created by victor on 2016/2/6. */public class ThemeUtils {    public static int getThemeColor(Context context, int attrRes) {        TypedArray typedArray = context.obtainStyledAttributes(new int[]{attrRes});        int color = typedArray.getColor(0, 0xffffff);        typedArray.recycle();        return color;    }    public static void setTheme (final AppCompatActivity activity, int selectedColor) {        if (selectedColor == ThemeUtils.getThemeColor(activity, R.attr.colorPrimary))            return;        if (selectedColor == activity.getResources().getColor(R.color.colorBluePrimary)) {            activity.setTheme(R.style.BlueTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Blue);        } else if (selectedColor == activity.getResources().getColor(R.color.colorRedPrimary)) {            activity.setTheme(R.style.RedTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Red);        } else if (selectedColor == activity.getResources().getColor(R.color.colorBrownPrimary)) {            activity.setTheme(R.style.BrownTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Brown);        } else if (selectedColor == activity.getResources().getColor(R.color.colorGreenPrimary)) {            activity.setTheme(R.style.GreenTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Green);        } else if (selectedColor == activity.getResources().getColor(R.color.colorPurplePrimary)) {            activity.setTheme(R.style.PurpleTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Purple);        } else if (selectedColor == activity.getResources().getColor(R.color.colorTealPrimary)) {            activity.setTheme(R.style.TealTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Teal);        } else if (selectedColor == activity.getResources().getColor(R.color.colorPinkPrimary)) {            activity.setTheme(R.style.PinkTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Pink);        } else if (selectedColor == activity.getResources().getColor(R.color.colorDeepPurplePrimary)) {            activity.setTheme(R.style.DeepPurpleTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.DeepPurple);        } else if (selectedColor == activity.getResources().getColor(R.color.colorOrangePrimary)) {            activity.setTheme(R.style.OrangeTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Orange);        } else if (selectedColor == activity.getResources().getColor(R.color.colorIndigoPrimary)) {            activity.setTheme(R.style.IndigoTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Indigo);        } else if (selectedColor == activity.getResources().getColor(R.color.colorLightGreenPrimary)) {            activity.setTheme(R.style.LightGreenTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.LightGreen);        } else if (selectedColor == activity.getResources().getColor(R.color.colorDeepOrangePrimary)) {            activity.setTheme(R.style.DeepOrangeTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.DeepOrange);        } else if (selectedColor == activity.getResources().getColor(R.color.colorLimePrimary)) {            activity.setTheme(R.style.LimeTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Lime);        } else if (selectedColor == activity.getResources().getColor(R.color.colorBlueGreyPrimary)) {            activity.setTheme(R.style.BlueGreyTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.BlueGrey);        } else if (selectedColor == activity.getResources().getColor(R.color.colorCyanPrimary)) {            activity.setTheme(R.style.CyanTheme);            SharePreferencesUtil.setCurrentTheme(activity, Theme.Cyan);        }        final View rootView = activity.getWindow().getDecorView();        rootView.setDrawingCacheEnabled(true);        rootView.buildDrawingCache(true);        final Bitmap localBitmap = Bitmap.createBitmap(rootView.getDrawingCache());        rootView.setDrawingCacheEnabled(false);        if (null != localBitmap && rootView instanceof ViewGroup) {            final View tmpView = new View(activity.getApplicationContext());            tmpView.setBackgroundDrawable(new BitmapDrawable(activity.getResources(), localBitmap));            ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);            ((ViewGroup) rootView).addView(tmpView, params);            tmpView.animate().alpha(0).setDuration(1000).setListener(new Animator.AnimatorListener() {                @Override                public void onAnimationStart(Animator animation) {                    ColorUiUtil.changeTheme(rootView, activity.getTheme());                    System.gc();                }                @Override                public void onAnimationEnd(Animator animation) {                    ((ViewGroup) rootView).removeView(tmpView);                    localBitmap.recycle();                }                @Override                public void onAnimationCancel(Animator animation) {                }                @Override                public void onAnimationRepeat(Animator animation) {                }            }).start();        }    }}